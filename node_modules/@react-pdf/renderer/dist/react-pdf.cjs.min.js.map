{"version":3,"file":"react-pdf.cjs.min.js","sources":["../src/layout/fontSubstitution/standardFont.js","../src/layout/fontSubstitution/index.js","../src/layout/linebreaker/linkedList.js","../src/layout/linebreaker/linebreak.js","../src/layout/linebreaker/formatter.js","../src/layout/linebreaker/index.js","../src/layout/index.js","../src/font/standard.js","../src/utils/font.js","../src/font/index.js","../src/elements/Root.js","../src/utils/jpeg.js","../src/utils/cache.js","../src/utils/image.js","../src/utils/emoji.js","../src/elements/Document.js","../src/elements/Node.js","../src/stylesheet/yogaValue.js","../src/stylesheet/transformUnits.js","../src/stylesheet/transformStyles.js","../src/stylesheet/index.js","../src/mixins/debug.js","../src/mixins/borders.js","../src/mixins/transform.js","../src/utils/styles.js","../src/elements/Base.js","../src/elements/TextInstance.js","../src/utils/pageSizes.js","../src/mixins/ruler.js","../src/elements/Page.js","../src/elements/View.js","../src/utils/url.js","../src/utils/ignorableChars.js","../src/utils/attributedString.js","../src/elements/Text.js","../src/elements/Link.js","../src/elements/Note.js","../src/elements/Image.js","../src/elements/index.js","../src/renderer.js","../src/index.js","../src/node.js"],"sourcesContent":["import { PDFFont } from '@react-pdf/pdfkit';\n\nclass StandardFont {\n  constructor(src) {\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n    this.glyphs = {};\n  }\n\n  layout(str) {\n    const [encoded, positions] = this.src.encode(str);\n\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs: encoded.map((g, i) => {\n        const glyph = this.getGlyph(parseInt(g, 16));\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      }),\n    };\n  }\n\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n\n  getGlyph(id) {\n    if (!this.glyphs[id]) {\n      this.glyphs[id] = this.src.font.characterToGlyph(id);\n    }\n\n    return {\n      id,\n      _font: this.src,\n      name: this.glyphs[id],\n    };\n  }\n\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n\n  get ascent() {\n    return this.src.ascender;\n  }\n\n  get descent() {\n    return this.src.descender;\n  }\n\n  get lineGap() {\n    return this.src.lineGap;\n  }\n\n  get unitsPerEm() {\n    return 1000;\n  }\n}\n\nexport default StandardFont;\n","import StandardFont from './standardFont';\n\nexport default () => ({ Run }) =>\n  class FontSubstitutionEngine {\n    constructor() {\n      this.fallbackFontInstance = null;\n    }\n\n    get fallbackFont() {\n      if (!this.fallbackFontInstance) {\n        this.fallbackFontInstance = new StandardFont('Helvetica');\n      }\n\n      return this.fallbackFontInstance;\n    }\n\n    getRuns(string, runs) {\n      const res = [];\n      let lastFont = null;\n      let lastIndex = 0;\n      let index = 0;\n\n      for (const run of runs) {\n        let defaultFont;\n\n        if (typeof run.attributes.font === 'string') {\n          defaultFont = new StandardFont(run.attributes.font);\n        } else {\n          defaultFont = run.attributes.font;\n        }\n\n        if (string.length === 0) {\n          res.push(new Run(0, 0, { font: defaultFont }));\n          break;\n        }\n\n        for (const char of string.slice(run.start, run.end)) {\n          const codePoint = char.codePointAt();\n          let font = defaultFont;\n\n          // If the default font does not have a glyph\n          // and the fallback font does, we use it\n          if (\n            !defaultFont.hasGlyphForCodePoint(codePoint) &&\n            this.fallbackFont.hasGlyphForCodePoint(codePoint)\n          ) {\n            font = this.fallbackFont;\n          }\n\n          if (font !== lastFont) {\n            if (lastFont) {\n              res.push(new Run(lastIndex, index, { font: lastFont }));\n            }\n\n            lastFont = font;\n            lastIndex = index;\n          }\n\n          index += char.length;\n        }\n      }\n\n      if (lastIndex < string.length) {\n        res.push(new Run(lastIndex, string.length, { font: lastFont }));\n      }\n\n      return res;\n    }\n  };\n","class Node {\n  constructor(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n}\n\nclass LinkedList {\n  static Node = Node;\n\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n  }\n\n  isLinked(node) {\n    return !(\n      (node &&\n        node.prev === null &&\n        node.next === null &&\n        this.tail !== node &&\n        this.head !== node) ||\n      this.isEmpty()\n    );\n  }\n\n  size() {\n    return this.listSize;\n  }\n\n  isEmpty() {\n    return this.listSize === 0;\n  }\n\n  first() {\n    return this.head;\n  }\n\n  last() {\n    return this.last;\n  }\n\n  toString() {\n    return this.toArray().toString();\n  }\n\n  toArray() {\n    let node = this.head;\n    const result = [];\n\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  }\n\n  forEach(fun) {\n    let node = this.head;\n\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  }\n\n  contains(n) {\n    let node = this.head;\n\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  }\n\n  at(i) {\n    let node = this.head;\n    let index = 0;\n\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  }\n\n  insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  }\n\n  insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  }\n\n  push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  }\n\n  unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  }\n\n  remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  }\n\n  pop() {\n    const node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n\n  shift() {\n    const node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n}\n\nexport default LinkedList;\n","import LinkedList from './linkedList';\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nconst linebreak = (nodes, lines, settings) => {\n  const options = {\n    demerits: {\n      line: (settings && settings.demerits && settings.demerits.line) || 10,\n      flagged:\n        (settings && settings.demerits && settings.demerits.flagged) || 100,\n      fitness:\n        (settings && settings.demerits && settings.demerits.fitness) || 3000,\n    },\n    tolerance: (settings && settings.tolerance) || 3,\n  };\n  const activeNodes = new LinkedList();\n  const sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0,\n  };\n  const lineLengths = lines;\n  const breaks = [];\n  let tmp = {\n    data: {\n      demerits: Infinity,\n    },\n  };\n\n  function breakpoint(\n    position,\n    demerits,\n    ratio,\n    line,\n    fitnessClass,\n    totals,\n    previous,\n  ) {\n    return {\n      position,\n      demerits,\n      ratio,\n      line,\n      fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0,\n      },\n      previous,\n    };\n  }\n\n  function computeCost(start, end, active, currentLine) {\n    let width = sum.width - active.totals.width;\n    let stretch = 0;\n    let shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    const lineLength =\n      currentLine < lineLengths.length\n        ? lineLengths[currentLine - 1]\n        : lineLengths[lineLengths.length - 1];\n\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n\n      return linebreak.infinity;\n    } else if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    const result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink,\n    };\n\n    for (let i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (\n        nodes[i].type === 'box' ||\n        (nodes[i].type === 'penalty' &&\n          nodes[i].penalty === -linebreak.infinity &&\n          i > breakPointIndex)\n      ) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  function mainLoop(node, index, nodes) {\n    let active = activeNodes.first();\n    let next = null;\n    let ratio = 0;\n    let demerits = 0;\n    let candidates = [];\n    let badness;\n    let currentLine = 0;\n    let tmpSum;\n    let currentClass = 0;\n    let fitnessClass;\n    let candidate;\n    let newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [\n        {\n          demerits: Infinity,\n        },\n        {\n          demerits: Infinity,\n        },\n        {\n          demerits: Infinity,\n        },\n        {\n          demerits: Infinity,\n        },\n      ];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(\n          active.data.position,\n          index,\n          active.data,\n          currentLine,\n        );\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (\n          ratio < -1 ||\n          (node.type === 'penalty' && node.penalty === -linebreak.infinity)\n        ) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits =\n              Math.pow(options.demerits.line + badness, 2) +\n              Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (\n            node.type === 'penalty' &&\n            node.penalty !== -linebreak.infinity\n          ) {\n            demerits =\n              Math.pow(options.demerits.line + badness, 2) -\n              Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n\n          if (\n            node.type === 'penalty' &&\n            nodes[active.data.position].type === 'penalty'\n          ) {\n            demerits +=\n              options.demerits.flagged *\n              node.flagged *\n              nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active,\n              demerits,\n              ratio,\n            };\n          }\n        }\n\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n\n      tmpSum = computeSum(index);\n\n      for (\n        fitnessClass = 0;\n        fitnessClass < candidates.length;\n        fitnessClass += 1\n      ) {\n        candidate = candidates[fitnessClass];\n\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(\n            breakpoint(\n              index,\n              candidate.demerits,\n              candidate.ratio,\n              candidate.active.data.line + 1,\n              fitnessClass,\n              tmpSum,\n              candidate.active,\n            ),\n          );\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(\n    new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)),\n  );\n\n  nodes.forEach((node, index, nodes) => {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(node => {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio,\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\n\nlinebreak.infinity = 10000;\n\nlinebreak.glue = (width, stretch, shrink) => ({\n  type: 'glue',\n  width,\n  stretch,\n  shrink,\n});\n\nlinebreak.box = (width, value, hyphenated = false) => ({\n  type: 'box',\n  width,\n  value,\n  hyphenated,\n});\n\nlinebreak.penalty = (width, penalty, flagged) => ({\n  type: 'penalty',\n  width,\n  penalty,\n  flagged,\n});\n\nexport default linebreak;\n","import english from 'hyphenation.en-us';\nimport Hypher from 'hypher';\nimport linebreak from './linebreak';\n\nconst SOFT_HYPHEN_HEX = '\\u00ad';\nconst NO_BREAK_SPACE_DECIMAL = 160;\n\nconst getWords = glyphString => {\n  const words = [];\n  const { start } = glyphString;\n  let lastIndex = 0;\n\n  for (const { index } of glyphString) {\n    const codePoint = glyphString.codePointAtGlyphIndex(index);\n\n    // Not break words in no-break-spaces\n    if (codePoint === NO_BREAK_SPACE_DECIMAL) {\n      continue;\n    }\n\n    if (glyphString.isWhiteSpace(index - start)) {\n      const word = glyphString.slice(lastIndex, index - start);\n\n      if (word.length > 0) {\n        words.push(word);\n      }\n\n      lastIndex = index - start + 1;\n    }\n  }\n\n  if (lastIndex < glyphString.end) {\n    const word = glyphString.slice(\n      lastIndex,\n      glyphString.end - glyphString.start,\n    );\n    words.push(word);\n  }\n\n  return words;\n};\n\nconst h = new Hypher(english);\nconst hyphenateString = string => {\n  if (string.includes(SOFT_HYPHEN_HEX)) {\n    return string.split(SOFT_HYPHEN_HEX);\n  }\n\n  return h.hyphenate(string);\n};\n\nconst hyphenateWord = glyphString => {\n  const hyphenated = hyphenateString(glyphString.string);\n\n  let index = 0;\n  const parts = hyphenated.map(part => {\n    const res = glyphString.slice(index, index + part.length);\n    index += part.length;\n    return res;\n  });\n\n  return parts;\n};\n\nconst hyphenate = words => words.map(word => hyphenateWord(word));\n\nconst formatter = (measureText, textAlign, callback) => {\n  const spaceWidth = measureText(' ');\n  const hyphenWidth = measureText('-');\n  const hyphenPenalty = !textAlign || textAlign === 'justify' ? 100 : 600;\n  const opts = {\n    width: 3,\n    stretch: 6,\n    shrink: 9,\n  };\n\n  return glyphString => {\n    const nodes = [];\n    const words = getWords(glyphString);\n    const spaceStretch = spaceWidth * opts.width / opts.stretch;\n    const spaceShrink = spaceWidth * opts.width / opts.shrink;\n    const hyphenationCallback = callback || hyphenate;\n    const hyphenatedWords = hyphenationCallback(words, glyphString);\n\n    hyphenatedWords.forEach((word, index, array) => {\n      if (word.length > 1) {\n        word.forEach((part, partIndex, partArray) => {\n          const isLastPart = partIndex === word.length - 1;\n\n          nodes.push(linebreak.box(measureText(part), part, !isLastPart));\n\n          if (partIndex !== partArray.length - 1) {\n            nodes.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n          }\n        });\n      } else {\n        nodes.push(linebreak.box(measureText(word[0]), word[0]));\n      }\n      if (index === array.length - 1) {\n        nodes.push(linebreak.glue(0, linebreak.infinity, 0));\n        nodes.push(linebreak.penalty(0, -linebreak.infinity, 1));\n      } else {\n        nodes.push(linebreak.glue(spaceWidth, spaceStretch, spaceShrink));\n      }\n    });\n\n    return nodes;\n  };\n};\n\nexport default formatter;\n","import createLinebreaker from '@textkit/linebreaker';\nimport formatter from './formatter';\nimport linebreak from './linebreak';\n\nconst HYPHEN = 0x002d;\nconst TOLERANCE_LIMIT = 40;\n\nexport default ({ hyphenationCallback } = {}) => Textkit => {\n  const TextkitLinebreaker = createLinebreaker()(Textkit);\n  const fallbackLinebreaker = new TextkitLinebreaker();\n\n  return class KPLineBreaker {\n    constructor(tolerance) {\n      this.tolerance = tolerance || 4;\n    }\n\n    suggestLineBreak(glyphString, width, paragraphStyle) {\n      let tolerance = this.tolerance;\n      const measuredWidth = this.measureWidth(glyphString);\n      const nodes = formatter(\n        measuredWidth,\n        paragraphStyle.align,\n        hyphenationCallback,\n      )(glyphString);\n      let breaks = [];\n\n      // Try again with a higher tolerance if the line breaking failed.\n      while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n        breaks = linebreak(nodes, [width], { tolerance });\n        tolerance += 2;\n      }\n\n      // Fallback to textkit default's linebreaking algorithm if K&P fails\n      if (breaks.length === 0) {\n        const fallback = fallbackLinebreaker.suggestLineBreak(\n          glyphString,\n          width,\n          paragraphStyle,\n        );\n        if (fallback) return fallback;\n\n        // If fallback didn't worked, we split workd based on width\n        const index = glyphString.glyphIndexAtOffset(width) - 1;\n        glyphString.insertGlyph(index, HYPHEN);\n        return { position: index + 1 };\n      }\n\n      if (!breaks[1]) {\n        return { position: glyphString.end };\n      }\n\n      const breakNode = this.findBreakNode(nodes, breaks[1].position);\n      const breakIndex = breakNode.value.end - glyphString.start;\n\n      if (breakNode.hyphenated) {\n        glyphString.insertGlyph(breakIndex, HYPHEN);\n        return { position: breakIndex + 1 };\n      }\n\n      // We kep the blank space at the end of the line to avoid justification issues\n      const offset = glyphString.isWhiteSpace(breakIndex) ? 1 : 0;\n      return { position: breakIndex + offset };\n    }\n\n    measureWidth(glyphString) {\n      const { font, fontSize } = glyphString.glyphRuns[0].attributes;\n\n      return word => {\n        if (typeof word === 'string') {\n          const scale = fontSize / font.unitsPerEm;\n          return font.layout(word).positions[0].xAdvance * scale;\n        }\n\n        return word.advanceWidth;\n      };\n    }\n\n    findBreakNode(nodes, position) {\n      let index = position - 1;\n\n      while (!nodes[index].value) {\n        index -= 1;\n      }\n\n      return nodes[index];\n    }\n  };\n};\n","import { LayoutEngine as BaseLayoutEngine } from '@react-pdf/textkit-core';\nimport scriptItemizer from '@react-pdf/script-itemizer';\nimport justificationEngine from '@textkit/justification-engine';\nimport textDecorationEngine from '@textkit/text-decoration-engine';\nimport lineFragmentGenerator from '@textkit/line-fragment-generator';\nimport fontSubstitutionEngine from './fontSubstitution';\nimport lineBreaker from './linebreaker';\n\n// justificationEngine values\nconst shrinkWhitespaceFactor = { before: -0.5, after: -0.5 };\n\nexport class LayoutEngine extends BaseLayoutEngine {\n  constructor({ hyphenationCallback }) {\n    const engines = {\n      scriptItemizer: scriptItemizer(),\n      decorationEngine: textDecorationEngine(),\n      lineFragmentGenerator: lineFragmentGenerator(),\n      fontSubstitutionEngine: fontSubstitutionEngine(),\n      lineBreaker: lineBreaker({ hyphenationCallback }),\n      justificationEngine: justificationEngine({ shrinkWhitespaceFactor }),\n    };\n\n    super(engines);\n  }\n}\n\nexport {\n  Run,\n  BBox,\n  Path,\n  Rect,\n  Point,\n  Block,\n  Range,\n  TabStop,\n  Polygon,\n  RunStyle,\n  GlyphRun,\n  Container,\n  Attachment,\n  GlyphString,\n  LineFragment,\n  ParagraphStyle,\n  DecorationLine,\n  FontDescriptor,\n  AttributedString,\n} from '@react-pdf/textkit-core';\n","export default [\n  'Courier',\n  'Courier-Bold',\n  'Courier-Oblique',\n  'Helvetica',\n  'Helvetica-Bold',\n  'Helvetica-Oblique',\n  'Times-Roman',\n  'Times-Bold',\n  'Times-Italic',\n];\n","import fetch from 'isomorphic-fetch';\n\nexport const fetchFont = src => {\n  return fetch(src)\n    .then(response => {\n      if (response.buffer) {\n        return response.buffer();\n      }\n      return response.arrayBuffer();\n    })\n    .then(arrayBuffer => Buffer.from(arrayBuffer));\n};\n","import isUrl from 'is-url';\nimport fontkit from '@react-pdf/fontkit';\nimport standardFonts from './standard';\nimport { fetchFont } from '../utils/font';\n\nlet fonts = {};\nlet emojiSource;\nlet hyphenationCallback;\n\nconst register = (src, { family, ...otherOptions }) => {\n  fonts[family] = {\n    src,\n    loaded: false,\n    loading: false,\n    data: null,\n    ...otherOptions,\n  };\n};\n\nconst registerHyphenationCallback = callback => {\n  hyphenationCallback = callback;\n};\n\nconst registerEmojiSource = ({ url, format = 'png' }) => {\n  emojiSource = { url, format };\n};\n\nconst getRegisteredFonts = () => Object.keys(fonts);\n\nconst getFont = family => fonts[family];\n\nconst getEmojiSource = () => emojiSource;\n\nconst getHyphenationCallback = () => hyphenationCallback;\n\nconst load = async function(fontFamily, doc) {\n  const font = fonts[fontFamily];\n\n  // We cache the font to avoid fetching it many time\n  if (font && !font.data && !font.loading) {\n    font.loading = true;\n\n    if (isUrl(font.src)) {\n      const data = await fetchFont(font.src);\n      font.data = fontkit.create(data);\n    } else {\n      font.data = fontkit.openSync(font.src);\n    }\n  }\n\n  // If the font wasn't added to the document yet (aka. loaded), we do.\n  // This prevents calling `registerFont` many times for the same font.\n  // Fonts loaded state will be resetted after document is closed.\n  if (font && !font.loaded) {\n    font.loaded = true;\n    font.loading = false;\n    doc.registerFont(fontFamily, font.data);\n  }\n\n  if (!font && !standardFonts.includes(fontFamily)) {\n    throw new Error(\n      `Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`,\n    );\n  }\n};\n\nconst reset = function() {\n  for (const font in fonts) {\n    if (fonts.hasOwnProperty(font)) {\n      fonts[font].loaded = false;\n    }\n  }\n};\n\nconst clear = function() {\n  fonts = {};\n};\n\nexport default {\n  register,\n  getEmojiSource,\n  getRegisteredFonts,\n  registerEmojiSource,\n  registerHyphenationCallback,\n  getHyphenationCallback,\n  getFont,\n  load,\n  clear,\n  reset,\n};\n","import PDFDocument from '@react-pdf/pdfkit';\nimport { LayoutEngine } from '../layout';\nimport Font from '../font';\n\nclass Root {\n  constructor() {\n    this.isDirty = false;\n    this.document = null;\n    this.instance = null;\n    this._layoutEngine = null;\n  }\n\n  get name() {\n    return 'Root';\n  }\n\n  get layoutEngine() {\n    if (!this._layoutEngine) {\n      const hyphenationCallback = Font.getHyphenationCallback();\n      this._layoutEngine = new LayoutEngine({ hyphenationCallback });\n    }\n\n    return this._layoutEngine;\n  }\n\n  appendChild(child) {\n    this.document = child;\n  }\n\n  markDirty() {\n    this.isDirty = true;\n  }\n\n  async render() {\n    this.instance = new PDFDocument({ autoFirstPage: false });\n    await this.document.render();\n    this.isDirty = false;\n  }\n}\n\nexport default Root;\n","// Extracted from https://github.com/devongovett/pdfkit/blob/master/lib/image/jpeg.coffee\n\nconst MARKERS = [\n  0xffc0,\n  0xffc1,\n  0xffc2,\n  0xffc3,\n  0xffc5,\n  0xffc6,\n  0xffc7,\n  0xffc8,\n  0xffc9,\n  0xffca,\n  0xffcb,\n  0xffcc,\n  0xffcd,\n  0xffce,\n  0xffcf,\n];\n\nclass JPEG {\n  data = null;\n  width = null;\n  height = null;\n\n  constructor(data) {\n    this.data = data;\n\n    if (data.readUInt16BE(0) !== 0xffd8) {\n      throw new Error('SOI not found in JPEG');\n    }\n\n    let marker;\n    let pos = 2;\n\n    while (pos < data.length) {\n      marker = data.readUInt16BE(pos);\n      pos += 2;\n      if (MARKERS.includes(marker)) {\n        break;\n      }\n      pos += data.readUInt16BE(pos);\n    }\n\n    if (!MARKERS.includes(marker)) {\n      throw new Error('Invalid JPEG.');\n    }\n\n    pos += 3;\n    this.height = data.readUInt16BE(pos);\n\n    pos += 2;\n    this.width = data.readUInt16BE(pos);\n  }\n}\n\nexport default JPEG;\n","const createCache = ({ limit = 100 } = {}) => {\n  const cache = {};\n  const keys = [];\n\n  return {\n    get: key => cache[key],\n    set: (key, value) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift()];\n      }\n      cache[key] = value;\n    },\n    length: () => keys.length,\n  };\n};\n\nexport default createCache;\n","import fetch from 'isomorphic-fetch';\nimport PNG from '@react-pdf/png-js';\nimport JPEG from './jpeg';\nimport createCache from './cache';\n\nconst imagesCache = createCache({ limit: 30 });\n\nconst isValidFormat = format => {\n  const lower = format.toLowerCase();\n  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';\n};\n\nconst isCompatibleBase64 = src =>\n  /data:image\\/[a-zA-Z]*;base64,[^\"]*/g.test(src);\n\nfunction getImage(body, extension) {\n  switch (extension.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n      return new JPEG(body);\n    case 'png':\n      return new PNG(body);\n    default:\n      return null;\n  }\n}\n\nconst resolveBase64Image = src => {\n  const match = /data:image\\/([a-zA-Z]*);base64,([^\"]*)/g.exec(src);\n  const format = match[1];\n  const data = match[2];\n\n  if (!isValidFormat(format)) {\n    throw new Error(`Base64 image invalid format: ${format}`);\n  }\n\n  return new Promise(resolve => {\n    return resolve(getImage(Buffer.from(data, 'base64'), format));\n  });\n};\n\nconst resolveLocalImage = src => {\n  if (src.data && src.format) {\n    return new Promise(resolve => resolve(getImage(src.data, src.format)));\n  }\n\n  throw new Error(`Invalid data given for local file: ${JSON.stringify(src)}`);\n};\n\nconst resolveRemoteImage = src => {\n  return fetch(src)\n    .then(response => {\n      if (response.buffer) {\n        return response.buffer();\n      }\n      return response.arrayBuffer();\n    })\n    .then(buffer => {\n      if (buffer.constructor.name === 'Buffer') {\n        return buffer;\n      }\n      return Buffer.from(buffer);\n    })\n    .then(body => {\n      const isPng =\n        body[0] === 137 &&\n        body[1] === 80 &&\n        body[2] === 78 &&\n        body[3] === 71 &&\n        body[4] === 13 &&\n        body[5] === 10 &&\n        body[6] === 26 &&\n        body[7] === 10;\n\n      const isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;\n\n      let extension = '';\n      if (isPng) {\n        extension = 'png';\n      } else if (isJpg) {\n        extension = 'jpg';\n      } else {\n        throw new Error('Not valid image extension');\n      }\n\n      return getImage(body, extension);\n    });\n};\n\nexport const resolveImage = (src, cache = true) => {\n  if (cache && imagesCache.get(src)) return imagesCache.get(src);\n\n  let image;\n  if (isCompatibleBase64(src)) {\n    image = resolveBase64Image(src);\n  } else if (typeof src === 'object') {\n    image = resolveLocalImage(src);\n  } else {\n    image = resolveRemoteImage(src);\n  }\n\n  if (cache) {\n    imagesCache.set(src, image);\n  }\n\n  return image;\n};\n","/* eslint-disable no-cond-assign */\nimport emojiRegex from 'emoji-regex';\nimport Font from '../font';\nimport { Attachment } from '../layout';\nimport { resolveImage } from '../utils/image';\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n\nconst reflect = promise => (...args) => promise(...args).then(v => v, e => e);\n\nconst fetchEmojiImage = reflect(resolveImage);\n\nconst getCodePoints = string =>\n  Array.from(string)\n    .map(char => char.codePointAt(0).toString(16))\n    .join('-');\n\nconst buildEmojiUrl = emoji => {\n  const { url, format } = Font.getEmojiSource();\n  return `${url}${getCodePoints(emoji)}.${format}`;\n};\n\nexport const fetchEmojis = string => {\n  const emojiSource = Font.getEmojiSource();\n\n  if (!emojiSource || !emojiSource.url) return [];\n\n  const promises = [];\n\n  let match;\n  while ((match = regex.exec(string))) {\n    const emoji = match[0];\n\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji);\n\n      emojis[emoji] = { loading: true };\n\n      promises.push(\n        fetchEmojiImage(emojiUrl).then(image => {\n          emojis[emoji].loading = false;\n          emojis[emoji].data = image.data;\n        }),\n      );\n    }\n  }\n\n  return promises;\n};\n\nexport const embedEmojis = fragments => {\n  const result = [];\n\n  for (let i = 0; i < fragments.length; i++) {\n    const fragment = fragments[i];\n\n    let match;\n    let lastIndex = 0;\n\n    while ((match = regex.exec(fragment.string))) {\n      const index = match.index;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match, Attachment.CHARACTER),\n          attributes: {\n            ...fragment.attributes,\n            attachment: new Attachment(emojiSize, emojiSize, {\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data,\n            }),\n          },\n        });\n      } else {\n        // If no emoji data, we just replace the emoji with a nodef char\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0)),\n          attributes: fragment.attributes,\n        });\n      }\n\n      lastIndex = index + emoji.length;\n    }\n\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes,\n      });\n    }\n  }\n\n  return result;\n};\n","import wrapPages from 'page-wrapping';\nimport Font from '../font';\nimport { fetchEmojis } from '../utils/emoji';\n\nclass Document {\n  static defaultProps = {\n    author: null,\n    keywords: null,\n    subject: null,\n    title: null,\n  };\n\n  constructor(root, props) {\n    this.root = root;\n    this.props = props;\n    this.children = [];\n  }\n\n  get name() {\n    return 'Document';\n  }\n\n  appendChild(child) {\n    child.parent = this;\n    this.children.push(child);\n  }\n\n  removeChild(child) {\n    const i = this.children.indexOf(child);\n    child.parent = null;\n    this.children.slice(i, 1);\n  }\n\n  addMetaData() {\n    const { title, author, subject, keywords, creator, producer } = this.props;\n\n    // The object keys need to start with a capital letter by the PDF spec\n    if (title) this.root.instance.info.Title = title;\n    if (author) this.root.instance.info.Author = author;\n    if (subject) this.root.instance.info.Subject = subject;\n    if (keywords) this.root.instance.info.Keywords = keywords;\n\n    this.root.instance.info.Creator = creator || 'react-pdf';\n    this.root.instance.info.Producer = producer || 'react-pdf';\n  }\n\n  async loadFonts() {\n    const promises = [];\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n\n      if (node.style && node.style.fontFamily) {\n        promises.push(Font.load(node.style.fontFamily, this.root.instance));\n      }\n\n      if (node.children) {\n        node.children.forEach(childNode => {\n          listToExplore.push(childNode);\n        });\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n  async loadEmojis() {\n    const promises = [];\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n\n      if (typeof node === 'string') {\n        promises.push(...fetchEmojis(node));\n      } else if (node.children) {\n        node.children.forEach(childNode => {\n          listToExplore.push(childNode);\n        });\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n  async loadImages() {\n    const promises = [];\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n\n      if (node.name === 'Image') {\n        promises.push(node.fetch());\n      }\n\n      if (node.children) {\n        node.children.forEach(childNode => {\n          listToExplore.push(childNode);\n        });\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n  async loadAssets() {\n    await Promise.all([this.loadFonts(), this.loadImages()]);\n  }\n\n  applyProps() {\n    this.children.forEach(child => child.applyProps());\n  }\n\n  update(newProps) {\n    this.props = newProps;\n  }\n\n  wrapPages() {\n    let pageCount = 1;\n\n    const pages = this.children.reduce((acc, page) => {\n      const wrapArea = page.size.height - (page.style.paddingBottom || 0);\n      if (page.wrap) {\n        const subpages = wrapPages(page, wrapArea, pageCount);\n\n        pageCount += subpages.length;\n\n        return [...acc, ...subpages];\n      } else {\n        page.height = page.size.height;\n        return [...acc, page];\n      }\n    }, []);\n\n    return pages;\n  }\n\n  async renderPages() {\n    const subpages = this.wrapPages();\n\n    for (let j = 0; j < subpages.length; j++) {\n      // Update dynamic text nodes with total pages info\n      subpages[j].renderDynamicNodes(\n        {\n          pageNumber: j + 1,\n          totalPages: subpages.length,\n        },\n        node => node.name === 'Text',\n      );\n      await subpages[j].render();\n    }\n\n    return subpages;\n  }\n\n  async render() {\n    try {\n      this.addMetaData();\n      this.applyProps();\n      await this.loadEmojis();\n      await this.loadAssets();\n      await this.renderPages();\n      this.root.instance.end();\n      Font.reset();\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nexport default Document;\n","import Yoga from 'yoga-layout';\nimport upperFirst from 'lodash.upperfirst';\n\nconst PERCENT = /^(\\d+)?%$/g;\n\nclass Node {\n  constructor() {\n    this.parent = null;\n    this.children = [];\n    this.computed = false;\n    this.layout = Yoga.Node.createDefault();\n  }\n\n  appendChild(child) {\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n      this.layout.insertChild(child.layout, this.layout.getChildCount());\n    }\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n      this.layout.removeChild(child.layout);\n    }\n  }\n\n  removeAllChilds() {\n    const children = [...this.children];\n    for (let i = 0; i < children.length; i++) {\n      children[i].remove();\n    }\n  }\n\n  remove() {\n    this.parent.removeChild(this);\n  }\n\n  setDimension(attr, value) {\n    const fixedMethod = `set${upperFirst(attr)}`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout[percentMethod](parseInt(isPercent[1], 10));\n    } else {\n      this.layout[fixedMethod](value);\n    }\n  }\n\n  setPosition(edge, value) {\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout.setPositionPercent(edge, parseInt(isPercent[1], 10));\n    } else {\n      this.layout.setPosition(edge, value);\n    }\n  }\n\n  setPadding(edge, value) {\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout.setPaddingPercent(edge, parseInt(isPercent[1], 10));\n    } else {\n      this.layout.setPadding(edge, value);\n    }\n  }\n\n  setMargin(edge, value) {\n    const isPercent = PERCENT.exec(value);\n\n    if (isPercent) {\n      this.layout.setMarginPercent(edge, parseInt(isPercent[1], 10));\n    } else {\n      this.layout.setMargin(edge, value);\n    }\n  }\n\n  setBorder(edge, value) {\n    if (PERCENT.exec(value)) {\n      throw new Error('Node: You cannot set percentage border widths');\n    }\n    this.layout.setBorder(edge, value);\n  }\n\n  getAbsoluteLayout() {\n    const parent = this.parent;\n    const parentLayout =\n      parent && parent.getAbsoluteLayout\n        ? parent.getAbsoluteLayout()\n        : { left: 0, top: 0 };\n\n    return {\n      left: this.left + parentLayout.left,\n      top: this.top + parentLayout.top,\n      height: this.height,\n      width: this.width,\n    };\n  }\n\n  copyStyle(node) {\n    this.layout.copyStyle(node.layout);\n  }\n\n  calculateLayout() {\n    this.layout.calculateLayout();\n    this.computed = true;\n  }\n\n  isEmpty() {\n    return this.children.length === 0;\n  }\n\n  markDirty() {\n    return this.layout.markDirty();\n  }\n\n  get position() {\n    return this.layout.getPositionType() === Yoga.POSITION_TYPE_ABSOLUTE\n      ? 'absolute'\n      : 'relative';\n  }\n\n  get top() {\n    return this.layout.getComputedTop() || 0;\n  }\n\n  get left() {\n    return this.layout.getComputedLeft() || 0;\n  }\n\n  get right() {\n    return this.layout.getComputedRight() || 0;\n  }\n\n  get bottom() {\n    return this.layout.getComputedBottom() || 0;\n  }\n\n  get width() {\n    return this.layout.getComputedWidth();\n  }\n\n  get minWidth() {\n    return this.layout.getMinWidth().value;\n  }\n\n  get maxWidth() {\n    return this.layout.getMaxWidth().value;\n  }\n\n  get height() {\n    return this.layout.getComputedHeight();\n  }\n\n  get minHeight() {\n    return this.layout.getMinHeight().value;\n  }\n\n  get maxHeight() {\n    return this.layout.getMaxHeight().value;\n  }\n\n  get paddingTop() {\n    return this.layout.getComputedPadding(Yoga.EDGE_TOP) || 0;\n  }\n\n  get paddingRight() {\n    return this.layout.getComputedPadding(Yoga.EDGE_RIGHT) || 0;\n  }\n\n  get paddingBottom() {\n    return this.layout.getComputedPadding(Yoga.EDGE_BOTTOM) || 0;\n  }\n\n  get paddingLeft() {\n    return this.layout.getComputedPadding(Yoga.EDGE_LEFT) || 0;\n  }\n\n  get marginTop() {\n    return this.layout.getComputedMargin(Yoga.EDGE_TOP) || 0;\n  }\n\n  get marginRight() {\n    return this.layout.getComputedMargin(Yoga.EDGE_RIGHT) || 0;\n  }\n\n  get marginBottom() {\n    return this.layout.getComputedMargin(Yoga.EDGE_BOTTOM) || 0;\n  }\n\n  get marginLeft() {\n    return this.layout.getComputedMargin(Yoga.EDGE_LEFT) || 0;\n  }\n\n  get borderTopWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_TOP) || 0;\n  }\n\n  get borderRightWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_RIGHT) || 0;\n  }\n\n  get borderBottomWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_BOTTOM) || 0;\n  }\n\n  get borderLeftWidth() {\n    return this.layout.getComputedBorder(Yoga.EDGE_LEFT) || 0;\n  }\n\n  get padding() {\n    return {\n      top: this.paddingTop,\n      right: this.paddingRight,\n      bottom: this.paddingBottom,\n      left: this.paddingLeft,\n    };\n  }\n\n  get margin() {\n    return {\n      top: this.marginTop,\n      right: this.marginRight,\n      bottom: this.marginBottom,\n      left: this.marginLeft,\n    };\n  }\n\n  set position(value) {\n    this.layout.setPositionType(\n      value === 'absolute'\n        ? Yoga.POSITION_TYPE_ABSOLUTE\n        : Yoga.POSITION_TYPE_RELATIVE,\n    );\n  }\n\n  set top(value) {\n    this.setPosition(Yoga.EDGE_TOP, value);\n  }\n\n  set left(value) {\n    this.setPosition(Yoga.EDGE_LEFT, value);\n  }\n\n  set right(value) {\n    this.setPosition(Yoga.EDGE_RIGHT, value);\n  }\n\n  set bottom(value) {\n    this.setPosition(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set width(value) {\n    this.setDimension('width', value);\n  }\n\n  set minWidth(value) {\n    this.setDimension('minWidth', value);\n  }\n\n  set maxWidth(value) {\n    this.setDimension('maxWidth', value);\n  }\n\n  set height(value) {\n    this.setDimension('height', value);\n  }\n\n  set minHeight(value) {\n    this.setDimension('minHeight', value);\n  }\n\n  set maxHeight(value) {\n    this.setDimension('maxHeight', value);\n  }\n\n  set paddingTop(value) {\n    this.setPadding(Yoga.EDGE_TOP, value);\n  }\n\n  set paddingRight(value) {\n    this.setPadding(Yoga.EDGE_RIGHT, value);\n  }\n\n  set paddingBottom(value) {\n    this.setPadding(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set paddingLeft(value) {\n    this.setPadding(Yoga.EDGE_LEFT, value);\n  }\n\n  set marginTop(value) {\n    this.setMargin(Yoga.EDGE_TOP, value);\n  }\n\n  set marginRight(value) {\n    this.setMargin(Yoga.EDGE_RIGHT, value);\n  }\n\n  set marginBottom(value) {\n    this.setMargin(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set marginLeft(value) {\n    this.setMargin(Yoga.EDGE_LEFT, value);\n  }\n\n  set padding(value) {\n    this.paddingTop = value;\n    this.paddingRight = value;\n    this.paddingBottom = value;\n    this.paddingLeft = value;\n  }\n\n  set margin(value) {\n    this.marginTop = value;\n    this.marginRight = value;\n    this.marginBottom = value;\n    this.marginLeft = value;\n  }\n\n  set borderTopWidth(value) {\n    this.setBorder(Yoga.EDGE_TOP, value);\n  }\n\n  set borderRightWidth(value) {\n    this.setBorder(Yoga.EDGE_RIGHT, value);\n  }\n\n  set borderBottomWidth(value) {\n    this.setBorder(Yoga.EDGE_BOTTOM, value);\n  }\n\n  set borderLeftWidth(value) {\n    this.setBorder(Yoga.EDGE_LEFT, value);\n  }\n}\n\nexport default Node;\n","import Yoga from 'yoga-layout';\n\nconst yogaValue = (prop, value) => {\n  const isAlignType = prop =>\n    prop === 'alignItems' || prop === 'alignContent' || prop === 'alignSelf';\n\n  switch (value) {\n    case 'auto':\n      if (prop === 'alignSelf') {\n        return Yoga.ALIGN_AUTO;\n      }\n      break;\n    case 'flex':\n      return Yoga.DISPLAY_FLEX;\n    case 'none':\n      return Yoga.DISPLAY_NONE;\n    case 'row':\n      return Yoga.FLEX_DIRECTION_ROW;\n    case 'row-reverse':\n      return Yoga.FLEX_DIRECTION_ROW_REVERSE;\n    case 'column':\n      return Yoga.FLEX_DIRECTION_COLUMN;\n    case 'column-reverse':\n      return Yoga.FLEX_DIRECTION_COLUMN_REVERSE;\n    case 'stretch':\n      return Yoga.ALIGN_STRETCH;\n    case 'baseline':\n      return Yoga.ALIGN_BASELINE;\n    case 'space-around':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_SPACE_AROUND;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_SPACE_AROUND;\n      }\n      break;\n    case 'space-between':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_SPACE_BETWEEN;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_SPACE_BETWEEN;\n      }\n      break;\n    case 'around':\n      return Yoga.JUSTIFY_SPACE_AROUND;\n    case 'between':\n      return Yoga.JUSTIFY_SPACE_BETWEEN;\n    case 'wrap':\n      return Yoga.WRAP_WRAP;\n    case 'wrap-reverse':\n      return Yoga.WRAP_WRAP_REVERSE;\n    case 'nowrap':\n      return Yoga.WRAP_NO_WRAP;\n    case 'flex-start':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_FLEX_START;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_FLEX_START;\n      }\n      break;\n    case 'flex-end':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_FLEX_END;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_FLEX_END;\n      }\n      break;\n    case 'center':\n      if (prop === 'justifyContent') {\n        return Yoga.JUSTIFY_CENTER;\n      } else if (isAlignType(prop)) {\n        return Yoga.ALIGN_CENTER;\n      }\n      break;\n    default:\n      return value;\n  }\n};\n\n// These are not supported yet\n\n// ALIGN_AUTO: 0,\n// DIMENSION_WIDTH: 0,\n// DIMENSION_HEIGHT: 1,\n// DIRECTION_INHERIT: 0,\n// DIRECTION_LTR: 1,\n// DIRECTION_RTL: 2,\n// EDGE_LEFT: 0,\n// EDGE_TOP: 1,\n// EDGE_RIGHT: 2,\n// EDGE_BOTTOM: 3,\n// EDGE_START: 4,\n// EDGE_END: 5,\n// EDGE_HORIZONTAL: 6,\n// EDGE_VERTICAL: 7,\n// EDGE_ALL: 8,\n// MEASURE_MODE_UNDEFINED: 0,\n// MEASURE_MODE_EXACTLY: 1,\n// MEASURE_MODE_AT_MOST: 2,\n// NODE_TYPE_DEFAULT: 0,\n// NODE_TYPE_TEXT: 1,\n// OVERFLOW_VISIBLE: 0,\n// OVERFLOW_HIDDEN: 1,\n// OVERFLOW_SCROLL: 2,\n// POSITION_TYPE_RELATIVE: 0,\n// POSITION_TYPE_ABSOLUTE: 1,\n// PRINT_OPTIONS_LAYOUT: 1,\n// PRINT_OPTIONS_STYLE: 2,\n// PRINT_OPTIONS_CHILDREN: 4,\n// UNIT_UNDEFINED: 0,\n// UNIT_POINT: 1,\n// UNIT_PERCENT: 2,\n// UNIT_AUTO: 3,\n\nexport default yogaValue;\n","const parseValue = value => {\n  const match = /^(\\d*\\.?\\d+)(in|mm|cm|pt)?$/g.exec(value);\n\n  if (match) {\n    return { value: parseFloat(match[1], 10), unit: match[2] || 'pt' };\n  } else {\n    return { value, unit: undefined };\n  }\n};\n\nconst parseScalar = value => {\n  let result = {};\n  const scalar = parseValue(value);\n\n  switch (scalar.unit) {\n    case 'in':\n      result = scalar.value * 72;\n      break;\n    case 'mm':\n      result = scalar.value * (1 / 25.4) * 72;\n      break;\n    case 'cm':\n      result = scalar.value * (1 / 2.54) * 72;\n      break;\n    default:\n      result = scalar.value;\n  }\n\n  return result;\n};\n\nexport default parseScalar;\n","import yogaValue from './yogaValue';\nimport parseScalar from './transformUnits';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst styleShortHands = {\n  margin: {\n    marginTop: true,\n    marginRight: true,\n    marginBottom: true,\n    marginLeft: true,\n  },\n  marginHorizontal: {\n    marginLeft: true,\n    marginRight: true,\n  },\n  marginVertical: {\n    marginTop: true,\n    marginBottom: true,\n  },\n  padding: {\n    paddingTop: true,\n    paddingRight: true,\n    paddingBottom: true,\n    paddingLeft: true,\n  },\n  paddingHorizontal: {\n    paddingLeft: true,\n    paddingRight: true,\n  },\n  paddingVertical: {\n    paddingTop: true,\n    paddingBottom: true,\n  },\n  border: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderTop: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n  },\n  borderRight: {\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n  },\n  borderBottom: {\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n  },\n  borderLeft: {\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderColor: {\n    borderTopColor: true,\n    borderRightColor: true,\n    borderBottomColor: true,\n    borderLeftColor: true,\n  },\n  borderRadius: {\n    borderTopLeftRadius: true,\n    borderTopRightRadius: true,\n    borderBottomRightRadius: true,\n    borderBottomLeftRadius: true,\n  },\n  borderStyle: {\n    borderTopStyle: true,\n    borderRightStyle: true,\n    borderBottomStyle: true,\n    borderLeftStyle: true,\n  },\n  borderWidth: {\n    borderTopWidth: true,\n    borderRightWidth: true,\n    borderBottomWidth: true,\n    borderLeftWidth: true,\n  },\n};\n\n// Expand the shorthand properties to isolate every declaration from the others.\nconst expandStyles = style => {\n  if (!style) return style;\n\n  const propsArray = Object.keys(style);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = style[key];\n\n    switch (key) {\n      case 'display':\n      case 'flex':\n      case 'flexDirection':\n      case 'flexWrap':\n      case 'flexFlow':\n      case 'flexGrow':\n      case 'flexShrink':\n      case 'flexBasis':\n      case 'justifyContent':\n      case 'alignSelf':\n      case 'alignItems':\n      case 'alignContent':\n      case 'order':\n        resolvedStyle[key] = yogaValue(key, value);\n        break;\n      case 'textAlignVertical':\n        resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n        break;\n      case 'margin':\n      case 'marginHorizontal':\n      case 'marginVertical':\n      case 'padding':\n      case 'paddingHorizontal':\n      case 'paddingVertical':\n      case 'border':\n      case 'borderTop':\n      case 'borderRight':\n      case 'borderBottom':\n      case 'borderLeft':\n      case 'borderColor':\n      case 'borderRadius':\n      case 'borderStyle':\n      case 'borderWidth':\n        {\n          const expandedProps = styleShortHands[key];\n          for (const propName in expandedProps) {\n            if (hasOwnProperty.call(expandedProps, propName)) {\n              resolvedStyle[propName] = value;\n            }\n          }\n        }\n        break;\n      default:\n        resolvedStyle[key] = value;\n        break;\n    }\n  }\n\n  return resolvedStyle;\n};\n\nconst matchBorderShorthand = value =>\n  value.match(/(\\d+(px|in|mm|cm|pt)?)\\s(\\S+)\\s(\\S+)/);\n\n// Transforms shorthand border values to correct value\nconst processBorders = (key, value) => {\n  const match = matchBorderShorthand(value);\n\n  if (match) {\n    if (key.match(/.Color/)) {\n      return match[4];\n    } else if (key.match(/.Style/)) {\n      return match[3];\n    } else if (key.match(/.Width/)) {\n      return match[1];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nconst transformStyles = style => {\n  const expandedStyles = expandStyles(style);\n  const propsArray = Object.keys(expandedStyles);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = expandedStyles[key];\n    const isBorderStyle = key.match(/border/) && typeof value === 'string';\n    const resolved = isBorderStyle ? processBorders(key, value) : value;\n\n    resolvedStyle[key] = parseScalar(resolved);\n  }\n\n  return resolvedStyle;\n};\n\nexport default transformStyles;\n","import matchMedia from 'media-engine';\nimport transformStyles from './transformStyles';\n\nconst create = styles => styles;\n\nconst flatten = input => {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n\n  const result = input.reduce((acc, style) => {\n    if (style) {\n      Object.keys(style).forEach(key => {\n        if (style[key] !== null && style[key] !== undefined) {\n          acc[key] = style[key];\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n\n  return result;\n};\n\nconst resolveMediaQueries = (input, container) => {\n  const result = Object.keys(input).reduce((acc, key) => {\n    if (/@media/.test(key)) {\n      return {\n        ...acc,\n        ...matchMedia({ [key]: input[key] }, container),\n      };\n    }\n\n    return { ...acc, [key]: input[key] };\n  }, {});\n\n  return result;\n};\n\nconst resolve = (styles, container) => {\n  if (!styles) return null;\n\n  styles = flatten(styles);\n  styles = resolveMediaQueries(styles, container);\n  styles = transformStyles(styles);\n\n  return styles;\n};\n\nconst absoluteFillObject = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport default {\n  hairlineWidth: 1,\n  create,\n  resolve,\n  flatten,\n  absoluteFillObject,\n};\n","const Debug = {\n  debug() {\n    const layout = this.getAbsoluteLayout();\n    const padding = this.padding;\n    const margin = this.margin;\n\n    this.root.instance.save();\n\n    this.debugContent(layout, margin, padding);\n    this.debugPadding(layout, margin, padding);\n    this.debugMargin(layout, margin);\n    this.debugText(layout, margin);\n\n    this.root.instance.restore();\n  },\n  debugText(layout, margin) {\n    const roundedWidth = Math.round(this.width + margin.left + margin.right);\n    const roundedHeight = Math.round(this.height + margin.top + margin.bottom);\n\n    this.root.instance\n      .fontSize(4)\n      .opacity(1)\n      .fillColor('black')\n      .text(\n        `${roundedWidth} x ${roundedHeight}`,\n        layout.left - margin.left,\n        Math.max(layout.top - margin.top - 4, 1),\n      );\n  },\n  debugContent(layout, margin, padding) {\n    this.root.instance\n      .fillColor('#a1c6e7')\n      .opacity(0.5)\n      .rect(\n        layout.left + padding.left,\n        layout.top + padding.top,\n        layout.width - padding.left - padding.right,\n        layout.height - padding.top - padding.bottom,\n      )\n      .fill();\n  },\n  debugPadding(layout, margin, padding) {\n    this.root.instance.fillColor('#c4deb9').opacity(0.5);\n\n    // Padding top\n    this.root.instance\n      .rect(\n        layout.left + padding.left,\n        layout.top,\n        layout.width - padding.right - padding.left,\n        padding.top,\n      )\n      .fill();\n\n    // Padding left\n    this.root.instance\n      .rect(layout.left, layout.top, padding.left, layout.height)\n      .fill();\n\n    // Padding right\n    this.root.instance\n      .rect(\n        layout.left + layout.width - padding.right,\n        layout.top,\n        padding.right,\n        layout.height,\n      )\n      .fill();\n\n    // Padding bottom\n    this.root.instance\n      .rect(\n        layout.left + padding.left,\n        layout.top + layout.height - padding.bottom,\n        layout.width - padding.right - padding.left,\n        padding.bottom,\n      )\n      .fill();\n  },\n  debugMargin(layout, margin) {\n    this.root.instance.fillColor('#f8cca1').opacity(0.5);\n\n    // Margin top\n    this.root.instance\n      .rect(layout.left, layout.top - margin.top, layout.width, margin.top)\n      .fill();\n\n    // Margin left\n    this.root.instance\n      .rect(\n        layout.left - margin.left,\n        layout.top - margin.top,\n        margin.left,\n        layout.height + margin.top + margin.bottom,\n      )\n      .fill();\n\n    // Margin right\n    this.root.instance\n      .rect(\n        layout.left + layout.width,\n        layout.top - margin.top,\n        margin.right,\n        layout.height + margin.top + margin.bottom,\n      )\n      .fill();\n\n    // Margin bottom\n    this.root.instance\n      .rect(\n        layout.left,\n        layout.top + layout.height,\n        layout.width,\n        margin.bottom,\n      )\n      .fill();\n  },\n};\n\nexport default Debug;\n","const Borders = {\n  drawBorders() {\n    const { left, top, width, height } = this.getAbsoluteLayout();\n\n    const {\n      borderTopWidth = 0,\n      borderRightWidth = 0,\n      borderBottomWidth = 0,\n      borderLeftWidth = 0,\n    } = this;\n\n    const {\n      borderTopLeftRadius = 0,\n      borderTopRightRadius = 0,\n      borderBottomRightRadius = 0,\n      borderBottomLeftRadius = 0,\n      borderTopColor = 'black',\n      borderRightColor = 'black',\n      borderBottomColor = 'black',\n      borderLeftColor = 'black',\n      borderTopStyle = 'solid',\n      borderRightStyle = 'solid',\n      borderBottomStyle = 'solid',\n      borderLeftStyle = 'solid',\n    } = this.getComputedStyles();\n\n    // Save current graphics stack\n    this.root.instance.save();\n\n    // border top\n    this.drawHorizontalBorder(\n      [\n        left + (borderTopLeftRadius > 0 ? borderTopWidth / 2 : 0),\n        top + borderTopWidth / 2,\n      ],\n      [\n        left + width - (borderTopRightRadius > 0 ? borderTopWidth / 2 : 0),\n        top + borderTopWidth / 2,\n      ],\n      borderTopLeftRadius,\n      borderTopRightRadius,\n      borderTopWidth,\n      borderTopColor,\n      borderTopStyle,\n    );\n\n    // border right\n    this.drawVerticalBorder(\n      [\n        left + width - borderRightWidth / 2,\n        top + (borderTopRightRadius > 0 ? borderRightWidth / 2 : 0),\n      ],\n      [\n        left + width - borderRightWidth / 2,\n        top + height - (borderBottomRightRadius > 0 ? borderRightWidth / 2 : 0),\n      ],\n      -borderTopRightRadius,\n      -borderBottomRightRadius,\n      borderRightWidth,\n      borderRightColor,\n      borderRightStyle,\n    );\n\n    // border bottom\n    this.drawHorizontalBorder(\n      [\n        left +\n          width -\n          (borderBottomRightRadius > 0 ? borderBottomWidth / 2 : 0),\n        top + height - borderBottomWidth / 2,\n      ],\n      [\n        left + (borderBottomLeftRadius > 0 ? borderBottomWidth / 2 : 0),\n        top + height - borderBottomWidth / 2,\n      ],\n      -borderBottomRightRadius,\n      -borderBottomLeftRadius,\n      borderBottomWidth,\n      borderBottomColor,\n      borderBottomStyle,\n    );\n\n    // border left\n    this.drawVerticalBorder(\n      [\n        left + borderLeftWidth / 2,\n        top + height - (borderBottomLeftRadius > 0 ? borderLeftWidth / 2 : 0),\n      ],\n      [\n        left + borderLeftWidth / 2,\n        top + (borderTopLeftRadius > 0 ? borderLeftWidth / 2 : 0),\n      ],\n      borderBottomLeftRadius,\n      borderTopLeftRadius,\n      borderLeftWidth,\n      borderLeftColor,\n      borderLeftStyle,\n    );\n\n    // Restore graphics stack to avoid side effects\n    this.root.instance.restore();\n  },\n  traceBorder(style, width) {\n    switch (style) {\n      case 'dashed':\n        this.root.instance.dash(width * 2, { space: width * 1.2 }).stroke();\n        break;\n      case 'dotted':\n        this.root.instance.dash(width, { space: width * 1.2 }).stroke();\n        break;\n      default:\n        this.root.instance.stroke();\n    }\n  },\n  drawHorizontalBorder(p1, p2, r1, r2, width, color, style) {\n    if (width <= 0) return;\n\n    this.root.instance\n      .lineWidth(width)\n      .moveTo(p1[0], p1[1] + r1)\n      .quadraticCurveTo(p1[0], p1[1], p1[0] + r1, p1[1])\n      .lineTo(p2[0] - r2, p2[1])\n      .quadraticCurveTo(p2[0], p2[1], p2[0], p2[1] + r2)\n      .strokeColor(color);\n\n    this.traceBorder(style, width);\n  },\n  drawVerticalBorder(p1, p2, r1, r2, width, color, style) {\n    if (width <= 0) return;\n\n    this.root.instance\n      .lineWidth(width)\n      .moveTo(p1[0] + r1, p1[1])\n      .quadraticCurveTo(p1[0], p1[1], p1[0], p1[1] - r1)\n      .lineTo(p2[0], p2[1] + r2)\n      .quadraticCurveTo(p2[0], p2[1], p2[0] + r2, p2[1])\n      .strokeColor(color);\n\n    this.traceBorder(style, width);\n  },\n};\n\nexport default Borders;\n","const getRotation = transform => {\n  const match = /rotate\\((-?\\d+.?\\d+)(.+)\\)/g.exec(transform);\n\n  if (match && match[1] && match[2]) {\n    const value = match[1];\n    return match[2] === 'rad' ? (value * 180) / Math.PI : value;\n  }\n\n  return 0;\n};\n\nconst getTranslateX = transform => {\n  const matchX = /translateX\\((-?\\d+\\.?d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?d*).*,\\s*(-?\\d+\\.?d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 0;\n};\n\nconst getTranslateY = transform => {\n  const matchY = /translateY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 0;\n};\n\nconst getScaleX = transform => {\n  const matchX = /scaleX\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 1;\n};\n\nconst getScaleY = transform => {\n  const matchY = /scaleY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 1;\n};\n\nconst getMatrix = transform => {\n  const match = /matrix\\(([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)\\)/g.exec(\n    transform,\n  );\n  if (match) return match.slice(1, 7);\n  return null;\n};\n\nconst applySingleTransformation = (element, transform) => {\n  const { left, top, width, height } = element.getAbsoluteLayout();\n  const origin = [left + width / 2, top + height / 2];\n\n  if (/rotate/g.test(transform)) {\n    element.root.instance.rotate(getRotation(transform), { origin });\n  } else if (/scaleX/g.test(transform)) {\n    element.root.instance.scale(getScaleX(transform), 1, { origin });\n  } else if (/scaleY/g.test(transform)) {\n    element.root.instance.scale(1, getScaleY(transform), { origin });\n  } else if (/scale/g.test(transform)) {\n    element.root.instance.scale(getScaleX(transform), getScaleY(transform), {\n      origin,\n    });\n  } else if (/translateX/g.test(transform)) {\n    element.root.instance.translate(getTranslateX(transform), 1, { origin });\n  } else if (/translateY/g.test(transform)) {\n    element.root.instance.translate(1, getTranslateY(transform), { origin });\n  } else if (/translate/g.test(transform)) {\n    element.root.instance.translate(\n      getTranslateX(transform),\n      getTranslateY(transform),\n      { origin },\n    );\n  } else if (/matrix/g.test(transform)) {\n    element.root.instance.transform(...getMatrix(transform));\n  }\n};\n\nconst Transformations = {\n  applyTransformations() {\n    let match;\n    const re = /[a-zA-Z]+\\([^)]+\\)/g;\n    const transform = (this.style && this.style.transform) || '';\n\n    while ((match = re.exec(transform)) != null) {\n      applySingleTransformation(this, match[0]);\n    }\n  },\n};\n\nexport default Transformations;\n","export const inheritedProperties = [\n  'color',\n  'fontFamily',\n  'fontSize',\n  'fontStyle',\n  'fontWeight',\n  'letterSpacing',\n  'textDecoration',\n  'lineHeight',\n  'textAlign',\n  'visibility',\n  'wordSpacing',\n];\n\nexport const flatStyles = stylesArray =>\n  stylesArray.reduce((acc, style) => ({ ...acc, ...style }), {});\n","import toPairsIn from 'lodash.topairsin';\nimport isFunction from 'lodash.isfunction';\nimport upperFirst from 'lodash.upperfirst';\nimport Node from './Node';\nimport pick from 'lodash.pick';\nimport merge from 'lodash.merge';\nimport warning from 'fbjs/lib/warning';\nimport StyleSheet from '../stylesheet';\nimport Debug from '../mixins/debug';\nimport Borders from '../mixins/borders';\nimport Transform from '../mixins/transform';\nimport { inheritedProperties } from '../utils/styles';\n\nclass Base extends Node {\n  constructor(root, props) {\n    super();\n\n    this.root = root;\n    this.props = merge(\n      {},\n      this.constructor.defaultProps,\n      Base.defaultProps,\n      props,\n    );\n\n    warning(!this.props.styles, '\"styles\" prop passed instead of \"style\" prop');\n  }\n\n  get page() {\n    return this.parent.page;\n  }\n\n  get wrap() {\n    return this.props.wrap;\n  }\n\n  get break() {\n    return this.props.break;\n  }\n\n  get fixed() {\n    return this.props.fixed;\n  }\n\n  get minPresenceAhead() {\n    return this.props.minPresenceAhead;\n  }\n\n  get absolute() {\n    return this.props.style.position === 'absolute';\n  }\n\n  set break(value) {\n    this.props.break = value;\n  }\n\n  applyProps() {\n    const { size, orientation } = this.page;\n\n    this.style = StyleSheet.resolve(this.props.style, {\n      width: size.width,\n      height: size.height,\n      orientation: orientation,\n    });\n\n    toPairsIn(this.style).map(([attribute, value]) => {\n      this.applyStyle(attribute, value);\n    });\n\n    this.children.forEach(child => {\n      if (child.applyProps) {\n        child.applyProps();\n      }\n    });\n  }\n\n  applyStyle(attribute, value) {\n    const setter = `set${upperFirst(attribute)}`;\n\n    switch (attribute) {\n      case 'marginTop':\n      case 'marginRight':\n      case 'marginBottom':\n      case 'marginLeft':\n      case 'paddingTop':\n      case 'paddingRight':\n      case 'paddingBottom':\n      case 'paddingLeft':\n      case 'borderTopWidth':\n      case 'borderRightWidth':\n      case 'borderBottomWidth':\n      case 'borderLeftWidth':\n      case 'position':\n      case 'top':\n      case 'right':\n      case 'bottom':\n      case 'left':\n      case 'width':\n      case 'height':\n      case 'minHeight':\n      case 'maxHeight':\n      case 'minWidth':\n      case 'maxWidth':\n        this[attribute] = value;\n        break;\n      default:\n        if (isFunction(this.layout[setter])) {\n          this.layout[setter](value);\n        }\n    }\n  }\n\n  getComputedStyles() {\n    let element = this.parent;\n    let inheritedStyles = {};\n\n    while (element && element.parent) {\n      inheritedStyles = {\n        ...element.parent.style,\n        ...element.style,\n        ...inheritedStyles,\n      };\n      element = element.parent;\n    }\n\n    return {\n      ...pick(inheritedStyles, inheritedProperties),\n      ...this.style,\n    };\n  }\n\n  drawBackgroundColor() {\n    const { left, top, width, height } = this.getAbsoluteLayout();\n    const styles = this.getComputedStyles();\n\n    // We can't set individual radius for each corner on PDF, so we get the higher\n    const borderRadius =\n      Math.max(\n        styles.borderTopLeftRadius,\n        styles.borderTopRightRadius,\n        styles.borderBottomRightRadius,\n        styles.borderBottomLeftRadius,\n      ) || 0;\n\n    if (styles.backgroundColor) {\n      this.root.instance\n        .fillColor(styles.backgroundColor)\n        .roundedRect(left, top, width, height, borderRadius)\n        .fill();\n    }\n  }\n\n  clone() {\n    const clone = new this.constructor(this.root, this.props);\n\n    clone.copyStyle(this);\n    clone.style = this.style;\n\n    return clone;\n  }\n\n  onNodeSplit(height, clone) {\n    this.calculateLayout();\n\n    clone.marginTop = 0;\n    clone.paddingTop = 0;\n\n    // If a height was given to the element, we need to substract the remaining wrapping height\n    // If not, we just let Yoga calculate the appropiate height when layout get's calculated.\n    if (clone.style.height) {\n      clone.height = this.height - height;\n    }\n\n    this.height = height;\n    this.marginBottom = 0;\n    this.paddingBottom = 0;\n  }\n\n  update(newProps) {\n    this.props = merge(\n      {},\n      this.constructor.defaultProps,\n      Base.defaultProps,\n      newProps,\n    );\n    this.root.markDirty();\n  }\n\n  async renderChildren() {\n    const absoluteChilds = this.children.filter(child => child.absolute);\n    const nonAbsoluteChilds = this.children.filter(child => !child.absolute);\n\n    for (let i = 0; i < nonAbsoluteChilds.length; i++) {\n      await nonAbsoluteChilds[i].render();\n    }\n\n    for (let i = 0; i < absoluteChilds.length; i++) {\n      await absoluteChilds[i].render();\n    }\n  }\n}\n\nBase.defaultProps = {\n  style: {\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n  minPresenceAhead: 0,\n};\n\nObject.assign(Base.prototype, Debug);\nObject.assign(Base.prototype, Borders);\nObject.assign(Base.prototype, Transform);\n\nexport default Base;\n","class TextInstance {\n  constructor(root, value) {\n    this.root = root;\n    this.value = value;\n    this.parent = null;\n    this.props = {};\n  }\n\n  get name() {\n    return 'TextInstance';\n  }\n\n  remove() {\n    this.parent.removeChild(this);\n  }\n\n  clone() {\n    return new this.constructor(this.root, this.value);\n  }\n\n  update(value) {\n    this.value = value;\n    this.parent.computed = false;\n    this.parent._container = null;\n    this.root.markDirty();\n  }\n}\n\nexport default TextInstance;\n","const PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n};\n\n// Return page size in an object { width, height } given the passed size and orientation\n// Accepts page type, arraoy or object as parameter\nconst getPageSize = (size, orientation = 'portrait') => {\n  let result;\n\n  if (typeof size === 'string') {\n    result = PAGE_SIZES[size.toUpperCase()];\n  } else if (Array.isArray(size)) {\n    result = size;\n  } else if (typeof size === 'object' && size.width && size.height) {\n    result = [size.width, size.height];\n  } else {\n    throw new Error(`Invalid Page size: ${size}`);\n  }\n\n  return orientation === 'portrait'\n    ? { width: result[0], height: result[1] }\n    : { width: result[1], height: result[0] };\n};\n\nexport default getPageSize;\n","const RULER_WIDTH = 13;\nconst RULER_COLOR = 'white';\nconst RULER_FONT_SIZE = 5;\nconst DEFAULT_RULER_STEPS = 50;\nconst LINE_WIDTH = 0.5;\nconst LINE_COLOR = 'gray';\nconst GRID_COLOR = '#ababab';\n\nconst range = (max, steps) =>\n  Array.from({ length: Math.ceil(max / steps) }, (_, i) => i * steps);\n\nconst matchPercentage = value => {\n  const match = value.match(/(\\d+\\.?\\d*)%/);\n  if (match) {\n    return 100 / parseFloat(match[1], 10);\n  }\n\n  return null;\n};\n\nconst Ruler = {\n  getRulerWidth() {\n    return RULER_WIDTH;\n  },\n  hasHorizontalRuler() {\n    return this.props.ruler || this.props.horizontalRuler;\n  },\n  hasVerticalRuler() {\n    return this.props.ruler || this.props.verticalRuler;\n  },\n  getHorizontalSteps() {\n    const value =\n      this.props.horizontalRulerSteps ||\n      this.props.rulerSteps ||\n      DEFAULT_RULER_STEPS;\n\n    if (typeof value === 'string') {\n      const percentage = matchPercentage(value);\n      if (percentage) {\n        const width = this.width - (this.hasVerticalRuler() ? RULER_WIDTH : 0);\n        return width / percentage;\n      }\n      throw new Error('Page: Invalid horizontal steps value');\n    }\n\n    return value;\n  },\n  getVerticalSteps() {\n    const value =\n      this.props.verticalRulerSteps ||\n      this.props.rulerSteps ||\n      DEFAULT_RULER_STEPS;\n\n    if (typeof value === 'string') {\n      const percentage = matchPercentage(value);\n      if (percentage) {\n        const height =\n          this.height - (this.hasHorizontalRuler() ? RULER_WIDTH : 0);\n        return height / percentage;\n      }\n      throw new Error('Page: Invalid horizontal steps value');\n    }\n\n    return value;\n  },\n  renderRuler() {\n    const hasHorizontalRuler = this.hasHorizontalRuler();\n    const hasVerticalRuler = this.hasVerticalRuler();\n\n    if (hasHorizontalRuler || hasVerticalRuler) {\n      this.root.instance\n        .save()\n        .lineWidth(LINE_WIDTH)\n        .fontSize(RULER_FONT_SIZE)\n        .opacity(1);\n\n      if (hasHorizontalRuler) this.drawHorizontalRuler();\n\n      if (hasVerticalRuler) this.drawVerticalRuler();\n\n      if (hasHorizontalRuler && hasVerticalRuler) {\n        this.root.instance\n          .rect(0, 0, RULER_WIDTH - LINE_WIDTH, RULER_WIDTH - LINE_WIDTH)\n          .fill(RULER_COLOR);\n      }\n\n      this.root.instance.restore();\n    }\n  },\n  drawHorizontalRuler() {\n    const offset = this.hasVerticalRuler() ? RULER_WIDTH : 0;\n\n    this.root.instance\n      .rect(offset, 0, this.width, RULER_WIDTH)\n      .fill(RULER_COLOR)\n      .moveTo(this.hasVerticalRuler() ? RULER_WIDTH : 0, RULER_WIDTH)\n      .lineTo(this.width, RULER_WIDTH)\n      .stroke(LINE_COLOR);\n\n    const hRange = range(this.width, this.getHorizontalSteps());\n\n    hRange.map(step => {\n      this.root.instance\n        .moveTo(offset + step, 0)\n        .lineTo(offset + step, RULER_WIDTH)\n        .stroke(LINE_COLOR)\n        .fillColor('black')\n        .text(`${Math.round(step)}`, offset + step + 1, 1);\n    });\n\n    hRange.map(step => {\n      if (step !== 0) {\n        this.root.instance\n          .moveTo(offset + step, RULER_WIDTH)\n          .lineTo(offset + step, this.height)\n          .stroke(GRID_COLOR);\n      }\n    });\n  },\n  drawVerticalRuler() {\n    const offset = this.hasHorizontalRuler() ? RULER_WIDTH : 0;\n\n    this.root.instance\n      .rect(0, offset, RULER_WIDTH, this.height)\n      .fill(RULER_COLOR)\n      .moveTo(RULER_WIDTH, this.hasHorizontalRuler() ? RULER_WIDTH : 0)\n      .lineTo(RULER_WIDTH, this.height)\n      .stroke(LINE_COLOR);\n\n    const vRange = range(this.height, this.getVerticalSteps());\n\n    vRange.map(step => {\n      this.root.instance\n        .moveTo(0, offset + step)\n        .lineTo(RULER_WIDTH, offset + step)\n        .stroke(LINE_COLOR)\n        .fillColor('black')\n        .text(`${Math.round(step)}`, 1, offset + step + 1);\n    });\n\n    vRange.map(step => {\n      if (step !== 0) {\n        this.root.instance\n          .moveTo(RULER_WIDTH, offset + step)\n          .lineTo(this.width, offset + step)\n          .stroke(GRID_COLOR);\n      }\n    });\n  },\n};\n\nexport default Ruler;\n","import { Fragment } from 'react';\nimport warning from 'fbjs/lib/warning';\nimport Base from './Base';\nimport TextInstance from './TextInstance';\nimport StyleSheet from '../stylesheet';\nimport getPageSize from '../utils/pageSizes';\nimport Ruler from '../mixins/ruler';\nimport { createInstance } from './index';\n\nclass Page extends Base {\n  static defaultProps = {\n    size: 'A4',\n    orientation: 'portrait',\n    style: {},\n    wrap: true,\n  };\n\n  constructor(root, props) {\n    super(root, props);\n\n    this._size = null;\n  }\n\n  get name() {\n    return 'Page';\n  }\n\n  get document() {\n    return this.parent;\n  }\n\n  get page() {\n    return this;\n  }\n\n  get orientation() {\n    return this.props.orientation;\n  }\n\n  get size() {\n    if (this._size) {\n      return this._size;\n    }\n\n    this._size = getPageSize(this.props.size, this.orientation);\n\n    // Adjust size for ruler\n    if (this.hasHorizontalRuler()) {\n      this._size.width += this.getRulerWidth();\n    }\n\n    if (this.hasVerticalRuler()) {\n      this._size.height += this.getRulerWidth();\n    }\n\n    return this._size;\n  }\n\n  resetMargins() {\n    if (\n      !!this.style.marginTop ||\n      !!this.style.marginBottom ||\n      !!this.style.marginLeft ||\n      !!this.style.marginRight\n    ) {\n      warning(\n        false,\n        'Margin values are not allowed on Page element. Use padding instead.',\n      );\n\n      this.style.marginTop = 0;\n      this.style.marginBottom = 0;\n      this.style.marginLeft = 0;\n      this.style.marginRight = 0;\n    }\n  }\n\n  applyProps() {\n    this.top = 0;\n    this.left = 0;\n    this.style = StyleSheet.resolve(this.props.style);\n\n    this.resetMargins();\n\n    this.layout.setWidth(this.size.width);\n\n    // Add some padding if ruler present, so we can see the whole page inside it\n    const rulerWidth = this.getRulerWidth();\n    const { paddingTop = 0, paddingLeft = 0 } = this.style;\n\n    if (this.hasHorizontalRuler()) {\n      this.style.paddingTop = paddingTop + rulerWidth;\n    }\n\n    if (this.hasVerticalRuler()) {\n      this.style.paddingLeft = paddingLeft + rulerWidth;\n    }\n\n    super.applyProps();\n  }\n\n  addDynamicChild(parent, elements) {\n    if (!elements) return;\n    const children = Array.isArray(elements) ? elements : [elements];\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const { type, props } = child;\n\n      if (typeof child === 'string') {\n        const instance = new TextInstance(this.root, child);\n        parent.appendChild(instance);\n      } else if (type !== Fragment) {\n        const instance = createInstance(child, this.root);\n        parent.appendChild(instance);\n        instance.applyProps();\n        this.addDynamicChild(instance, props.children);\n      } else {\n        this.addDynamicChild(parent, props.children);\n      }\n    }\n  }\n\n  renderDynamicNodes(props, cb) {\n    const listToExplore = this.children.slice(0);\n\n    while (listToExplore.length > 0) {\n      const node = listToExplore.shift();\n      const condition = cb ? cb(node) : true;\n\n      if (condition && node.props.render) {\n        node.removeAllChilds();\n        const elements = node.props.render(props);\n        this.addDynamicChild(node, elements);\n        if (!node.fixed) node.props.render = null;\n        continue;\n      }\n\n      if (node.children) {\n        listToExplore.push(...node.children);\n      }\n    }\n  }\n\n  nodeWillWrap(props) {\n    this.renderDynamicNodes(props);\n    this.calculateLayout();\n  }\n\n  onNodeSplit(height, clone) {\n    clone.marginTop = 0;\n    this.marginBottom = 0;\n    this.calculateLayout();\n  }\n\n  update(newProps) {}\n\n  clone() {\n    const clone = super.clone();\n    clone._size = this.size;\n    return clone;\n  }\n\n  async render() {\n    const { instance } = this.root;\n\n    this.height = this.size.height;\n    this.calculateLayout();\n\n    instance.addPage({\n      size: [this.size.width, this.size.height],\n      margin: 0,\n    });\n\n    if (this.style.backgroundColor) {\n      instance\n        .fillColor(this.style.backgroundColor)\n        .rect(0, 0, this.size.width, this.size.height)\n        .fill();\n    }\n\n    await this.renderChildren();\n\n    if (this.props.debug) this.debug();\n\n    this.renderRuler();\n  }\n}\n\nObject.assign(Page.prototype, Ruler);\n\nexport default Page;\n","import Base from './Base';\n\nclass View extends Base {\n  static defaultProps = {\n    style: {},\n    wrap: true,\n  };\n\n  get name() {\n    return 'View';\n  }\n\n  async render() {\n    this.root.instance.save();\n    this.applyTransformations();\n    this.drawBackgroundColor();\n    this.drawBorders();\n    await this.renderChildren();\n    if (this.props.debug) this.debug();\n    this.root.instance.restore();\n  }\n}\n\nexport default View;\n","const PROTOCOL_REGEXP = /^(http|https|ftp|ftps|mailto)\\:\\/\\//i;\n\nexport const getURL = value => {\n  let src = value;\n\n  if (typeof src === 'string' && !src.match(PROTOCOL_REGEXP)) {\n    src = `http://${src}`;\n  }\n\n  return src;\n};\n","const IGNORABLE_CODEPOINTS = [\n  8232, // LINE_SEPARATOR\n  8233, // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font =>\n  IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n    if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n    return [...acc, String.fromCharCode(codePoint)];\n  }, []);\n\nexport const ignoreChars = fragments =>\n  fragments.map(fragment => {\n    const charSubset = buildSubsetForFont(fragment.attributes.font);\n    const subsetRegex = new RegExp(charSubset.join('|'));\n\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes,\n    };\n  });\n","import upperFirst from 'lodash.upperfirst';\nimport { AttributedString } from '../layout';\nimport Font from '../font';\nimport { embedEmojis } from './emoji';\nimport { ignoreChars } from './ignorableChars';\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\n\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\n\nexport const getFragments = instance => {\n  let fragments = [];\n  const {\n    color = 'black',\n    fontFamily = 'Helvetica',\n    fontSize = 18,\n    textAlign = 'left',\n    position,\n    top,\n    bottom,\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n  } = instance.getComputedStyles();\n\n  instance.children.forEach(child => {\n    if (child.value !== null && child.value !== undefined) {\n      const obj = Font.getFont(fontFamily);\n      const font = obj ? obj.data : fontFamily;\n      const string = transformText(child.value, textTransform);\n\n      fragments.push({\n        string,\n        attributes: {\n          font,\n          color,\n          fontSize,\n          align: textAlign,\n          link: instance.src,\n          characterSpacing: letterSpacing,\n          underlineStyle: textDecorationStyle,\n          underline: textDecoration === 'underline',\n          underlineColor: textDecorationColor || color,\n          lineHeight: lineHeight ? lineHeight * fontSize : null,\n          yOffset: position === 'relative' ? -top || bottom || 0 : null,\n        },\n      });\n    } else {\n      if (child) {\n        fragments.push(...getFragments(child));\n      }\n    }\n  });\n\n  for (const preprocessor of PREPROCESSORS) {\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n\nexport const getAttributedString = instance => {\n  return AttributedString.fromFragments(getFragments(instance)).trim();\n};\n","import Yoga from 'yoga-layout';\nimport createPDFRenderer from '@textkit/pdf-renderer';\nimport Base from './Base';\nimport { Rect, Path, Container } from '../layout';\nimport { getURL } from '../utils/url';\nimport { getAttributedString } from '../utils/attributedString';\n\nconst INFINITY = 999999;\nconst PDFRenderer = createPDFRenderer({ Rect });\n\nclass Text extends Base {\n  static defaultProps = {\n    wrap: true,\n    widows: 2,\n    orphans: 2,\n  };\n\n  constructor(root, props) {\n    super(root, props);\n\n    this.start = 0;\n    this.end = 0;\n    this.computed = false;\n    this._container = null;\n    this._attributedString = null;\n    this.renderCallback = props.render;\n    this.layout.setMeasureFunc(this.measureText.bind(this));\n  }\n\n  get name() {\n    return 'Text';\n  }\n\n  get src() {\n    return getURL(this.props.src || this.props.href);\n  }\n\n  get attributedString() {\n    if (!this._attributedString) {\n      this._attributedString = getAttributedString(this);\n    }\n    return this._attributedString;\n  }\n\n  set attributedString(value) {\n    this._attributedString = value;\n  }\n\n  get container() {\n    const lines = this._container.blocks.reduce(\n      (acc, block) => [...acc, ...block.lines],\n      [],\n    );\n\n    return {\n      ...this._container,\n      blocks: [{ lines: lines.splice(this.start, this.end) }],\n    };\n  }\n\n  get lines() {\n    if (!this.container) return [];\n\n    return this.container.blocks.reduce(\n      (acc, block) => [...acc, ...block.lines],\n      [],\n    );\n  }\n\n  get linesHeight() {\n    if (!this._container) return -1;\n    return this.lines.reduce((acc, line) => acc + line.height, 0);\n  }\n\n  get linesWidth() {\n    if (!this._container) return -1;\n    return Math.max(...this.lines.map(line => line.advanceWidth));\n  }\n\n  appendChild(child) {\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n      this.computed = false;\n      this._attributedString = null;\n      this.markDirty();\n    }\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n      this.computed = false;\n      this._attributedString = null;\n      this.markDirty();\n    }\n  }\n\n  lineIndexAtHeight(height) {\n    let counter = 0;\n    for (let i = 0; i < this.lines.length; i++) {\n      const line = this.lines[i];\n\n      if (counter + line.height > height) {\n        return i;\n      }\n\n      counter += line.height;\n    }\n\n    return this.lines.length;\n  }\n\n  heightAtLineIndex(index) {\n    let counter = 0;\n\n    for (let i = 0; i < index; i++) {\n      const line = this.lines[i];\n      counter += line.height;\n    }\n\n    return counter;\n  }\n\n  layoutText(width, height) {\n    // IF height null or NaN, we take some liberty on layout height\n    height = height || INFINITY;\n\n    // Text layout is expensive. That's why we ensure to only do it once\n    // (except dynamic nodes. Those change content and needs to relayout every time)\n    if (!this._container || this.props.render) {\n      const path = new Path().rect(0, 0, width, height);\n      const container = new Container(path);\n      const attributedString = this.attributedString;\n\n      // Do the actual text layout\n      this.root.layoutEngine.layout(attributedString, [container]);\n      this._container = container;\n    }\n\n    // Get the total amount of rendered lines\n    const linesCount = this._container.blocks.reduce(\n      (acc, block) => acc + block.lines.length,\n      0,\n    );\n\n    this.computed = true;\n    this.end = linesCount + 1;\n  }\n\n  measureText(width, widthMode, height, heightMode) {\n    if (widthMode === Yoga.MEASURE_MODE_EXACTLY) {\n      this.layoutText(width);\n\n      return { height: this.style.flexGrow ? NaN : this.linesHeight };\n    }\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_AT_MOST ||\n      heightMode === Yoga.MEASURE_MODE_AT_MOST\n    ) {\n      this.layoutText(width, height);\n\n      return {\n        height: this.linesHeight,\n        width: Math.min(width, this.linesWidth),\n      };\n    }\n\n    return {};\n  }\n\n  getComputedStyles() {\n    const styles = super.getComputedStyles();\n\n    // Inherit relative positioning for inline childs\n    if (\n      this.parent &&\n      this.parent.name === 'Text' &&\n      this.parent.style.position === 'relative'\n    ) {\n      styles.top = styles.top || this.parent.style.top;\n      styles.bottom = styles.bottom || this.parent.style.bottom;\n      styles.position = styles.position || 'relative';\n    }\n\n    // Apply default link styles\n    if (this.src) {\n      styles.color = styles.color || 'blue';\n      styles.textDecoration = styles.textDecoration || 'underline';\n    }\n\n    return styles;\n  }\n\n  wrapHeight(height) {\n    const { orphans, widows } = this.props;\n    const linesQuantity = this.lines.length;\n    const sliceHeight = height - this.paddingTop;\n    const slicedLine = this.lineIndexAtHeight(sliceHeight);\n\n    if (linesQuantity < orphans) {\n      return height;\n    } else if (slicedLine < orphans || linesQuantity < orphans + widows) {\n      return 0;\n    } else if (linesQuantity === orphans + widows) {\n      return this.heightAtLineIndex(orphans - 1);\n    } else if (linesQuantity - slicedLine < widows) {\n      return height - this.heightAtLineIndex(widows - 1);\n    }\n\n    return height;\n  }\n\n  onNodeSplit(height, clone) {\n    const wrapHeight = this.wrapHeight(height);\n    const slicedLineIndex = this.lineIndexAtHeight(wrapHeight);\n    const slicedLine = this.lines[slicedLineIndex - 1];\n\n    clone.marginTop = 0;\n    clone.paddingTop = 0;\n    clone.start = slicedLineIndex;\n    clone.attributedString = this.attributedString.slice(\n      slicedLine ? slicedLine.stringEnd : 0,\n      this.attributedString.length,\n    );\n\n    this.height = wrapHeight;\n    this.marginBottom = 0;\n    this.paddingBottom = 0;\n    this.end = slicedLineIndex;\n  }\n\n  clone() {\n    const text = super.clone();\n\n    // Save calculated layout for non-dynamic clone elements\n    if (!this.props.render && !this.props.fixed) {\n      text._container = this._container;\n    }\n\n    return text;\n  }\n\n  async render() {\n    this.root.instance.save();\n    this.applyTransformations();\n    this.drawBackgroundColor();\n    this.drawBorders();\n\n    // Calculate text layout if needed\n    // This can happen if measureText was not called by Yoga\n    if (!this.computed) {\n      this.layoutText(\n        this.width - this.padding.left - this.padding.right,\n        this.height - this.padding.top - this.padding.bottom,\n      );\n    }\n\n    const padding = this.padding;\n    const { top, left } = this.getAbsoluteLayout();\n\n    // We translate lines based on Yoga container\n    const initialX = this.lines[0] ? this.lines[0].rect.y : 0;\n\n    this.lines.forEach(line => {\n      line.rect.x += left + padding.left;\n      line.rect.y += top + padding.top - initialX;\n    });\n\n    const renderer = new PDFRenderer(this.root.instance, {\n      outlineLines: false,\n    });\n\n    renderer.render(this.container);\n\n    if (this.props.debug) {\n      this.debug();\n    }\n\n    this.root.instance.restore();\n  }\n}\n\nexport default Text;\n","import Base from './Base';\nimport { getURL } from '../utils/url';\n\nclass Link extends Base {\n  get name() {\n    return 'Link';\n  }\n\n  get src() {\n    return getURL(this.props.src || this.props.href);\n  }\n\n  async render() {\n    const { top, left, width, height } = this.getAbsoluteLayout();\n    this.root.instance.link(left, top, width, height, this.src);\n    await this.renderChildren();\n    if (this.props.debug) this.debug();\n  }\n}\n\nexport default Link;\n","import Base from './Base';\n\nclass Note extends Base {\n  static defaultProps = {};\n\n  get name() {\n    return 'Note';\n  }\n\n  appendChild(child) {\n    if (child.name !== 'TextInstance') {\n      throw new Error('Note only accepts string children');\n    }\n\n    if (child) {\n      child.parent = this;\n      this.children.push(child);\n    }\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index !== -1) {\n      child.parent = null;\n      this.children.splice(index, 1);\n    }\n  }\n\n  applyProps() {\n    super.applyProps();\n    this.height = 0;\n    this.width = 0;\n  }\n\n  async render() {\n    const { top, left } = this.getAbsoluteLayout();\n    const value = this.children[0] ? this.children[0].value : '';\n\n    this.root.instance.note(left, top, 0, 0, value);\n  }\n}\n\nexport default Note;\n","import Yoga from 'yoga-layout';\nimport warning from 'fbjs/lib/warning';\nimport Base from './Base';\nimport { resolveImage } from '../utils/image';\n\nconst SAFETY_HEIGHT = 10;\n\n// We manage two bounding boxes in this class:\n//  - Yoga node: Image bounding box. Adjust based on image and page size\n//  - Image node: Real image container. In most cases equals Yoga node, except if image is bigger than page\nclass Image extends Base {\n  static defaultProps = {\n    wrap: false,\n    cache: true,\n  };\n\n  constructor(root, props) {\n    super(root, props);\n\n    this.image = null;\n    this.layout.setMeasureFunc(this.measureImage.bind(this));\n  }\n\n  get name() {\n    return 'Image';\n  }\n\n  shouldGrow() {\n    return !!this.getComputedStyles().flexGrow;\n  }\n\n  measureImage(width, widthMode, height, heightMode) {\n    const imageMargin = this.margin;\n    const pagePadding = this.page.padding;\n    const pageArea =\n      this.page.size.height -\n      pagePadding.top -\n      pagePadding.bottom -\n      imageMargin.top -\n      imageMargin.bottom -\n      SAFETY_HEIGHT;\n\n    // Skip measure if image data not present yet\n    if (!this.image) return { width: 0, height: 0 };\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n      heightMode === Yoga.MEASURE_MODE_UNDEFINED\n    ) {\n      const scaledHeight = width / this.ratio;\n      return { height: Math.min(pageArea, scaledHeight) };\n    }\n\n    if (\n      heightMode === Yoga.MEASURE_MODE_EXACTLY &&\n      (widthMode === Yoga.MEASURE_MODE_AT_MOST ||\n        widthMode === Yoga.MEASURE_MODE_UNDEFINED)\n    ) {\n      return { width: Math.min(height * this.ratio, width) };\n    }\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n      heightMode === Yoga.MEASURE_MODE_AT_MOST\n    ) {\n      const scaledHeight = width / this.ratio;\n      return { height: Math.min(height, pageArea, scaledHeight) };\n    }\n\n    if (\n      widthMode === Yoga.MEASURE_MODE_AT_MOST &&\n      heightMode === Yoga.MEASURE_MODE_AT_MOST\n    ) {\n      const imageWidth = Math.min(this.image.width, width);\n\n      return {\n        width: imageWidth,\n        height: imageWidth / this.ratio,\n      };\n    }\n\n    return { height, width };\n  }\n\n  get ratio() {\n    return this.image.data ? this.image.width / this.image.height : 1;\n  }\n\n  async fetch() {\n    try {\n      this.image = await resolveImage(this.props.src, this.props.cache);\n    } catch (e) {\n      this.image = { width: 0, height: 0 };\n      console.warn(e.message);\n    }\n  }\n\n  clone() {\n    const clone = super.clone();\n    clone.image = this.image;\n    return clone;\n  }\n\n  async render() {\n    const padding = this.padding;\n    const { left, top } = this.getAbsoluteLayout();\n\n    this.root.instance.save();\n    this.applyTransformations();\n    this.drawBackgroundColor();\n    this.drawBorders();\n\n    if (this.image.data) {\n      // Inner offset between yoga node and image box\n      // Makes image centered inside Yoga node\n      const width =\n        Math.min(this.height * this.ratio, this.width) -\n        padding.left -\n        padding.right;\n      const height = this.height - padding.top - padding.bottom;\n      const xOffset = Math.max((this.width - width) / 2, 0);\n\n      if (width !== 0 && height !== 0) {\n        this.root.instance.image(\n          this.image.data,\n          left + padding.left + xOffset,\n          top + padding.top,\n          { width, height },\n        );\n      } else {\n        warning(\n          false,\n          `Image with src '${\n            this.props.src\n          }' skipped due to invalid dimensions`,\n        );\n      }\n    }\n\n    if (this.props.debug) {\n      this.debug();\n    }\n\n    this.root.instance.restore();\n  }\n}\n\nexport default Image;\n","import Root from './Root';\nimport Document from './Document';\nimport Page from './Page';\nimport View from './View';\nimport Text from './Text';\nimport Link from './Link';\nimport Note from './Note';\nimport Image from './Image';\nimport TextInstance from './TextInstance';\n\nconst constructors = {\n  ROOT: Root,\n  PAGE: Page,\n  TEXT: Text,\n  LINK: Link,\n  VIEW: View,\n  NOTE: Note,\n  IMAGE: Image,\n  DOCUMENT: Document,\n  TEXT_INSTANCE: TextInstance,\n};\n\nfunction createInstance(element, root) {\n  const { type, props = {} } = element;\n\n  if (constructors[type]) {\n    return new constructors[type](root, props);\n  }\n\n  throw new Error(`Invalid element of type ${type} passed to PDF renderer`);\n}\n\nexport { createInstance };\n","'use strict';\n\nimport ReactFiberReconciler from 'react-reconciler';\nimport emptyObject from 'fbjs/lib/emptyObject';\nimport { createInstance } from './elements';\n\nconst objectsEqual = (a, b) => {\n  const oldPropsKeys = Object.keys(a);\n  const newPropsKeys = Object.keys(b);\n\n  if (oldPropsKeys.length !== newPropsKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < oldPropsKeys.length; i++) {\n    const propName = oldPropsKeys[i];\n\n    if (propName === 'render') {\n      if (!a[propName] !== !b[propName]) {\n        return false;\n      }\n      continue;\n    }\n\n    if (propName !== 'children' && a[propName] !== b[propName]) {\n      if (\n        typeof a[propName] === 'object' &&\n        typeof b[propName] === 'object' &&\n        objectsEqual(a[propName], b[propName])\n      ) {\n        continue;\n      }\n\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// If the Link has a strign child or render prop, substitute the instance by a Text,\n// that will ultimately render the inline Link via the textkit PDF renderer.\nconst shouldReplaceLink = (type, props) =>\n  type === 'LINK' &&\n  (typeof props.children === 'string' ||\n    Array.isArray(props.children) ||\n    props.render);\n\nconst PDFRenderer = ReactFiberReconciler({\n  supportsMutation: true,\n  appendInitialChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  createInstance(type, props, internalInstanceHandle) {\n    const instanceType = shouldReplaceLink(type, props) ? 'TEXT' : type;\n    return createInstance(\n      { type: instanceType, props },\n      internalInstanceHandle,\n    );\n  },\n\n  createTextInstance(text, rootContainerInstance) {\n    return createInstance(\n      { type: 'TEXT_INSTANCE', props: text },\n      rootContainerInstance,\n    );\n  },\n\n  finalizeInitialChildren(element, type, props) {\n    return false;\n  },\n\n  getPublicInstance(instance) {\n    return instance;\n  },\n\n  prepareForCommit() {\n    // Noop\n  },\n\n  prepareUpdate(element, type, oldProps, newProps) {\n    return !objectsEqual(oldProps, newProps);\n  },\n\n  resetAfterCommit() {\n    // Noop\n  },\n\n  resetTextContent(element) {\n    // Noop\n  },\n\n  getRootHostContext() {\n    return emptyObject;\n  },\n\n  getChildHostContext() {\n    return emptyObject;\n  },\n\n  shouldSetTextContent(type, props) {\n    return false;\n  },\n\n  now: Date.now,\n\n  useSyncScheduling: true,\n\n  appendChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  appendChildToContainer(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n\n  removeChild(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n\n  removeChildFromContainer(parentInstance, child) {\n    parentInstance.removeChild(child);\n  },\n\n  commitTextUpdate(textInstance, oldText, newText) {\n    textInstance.update(newText);\n  },\n\n  commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    instance.update(newProps);\n  },\n});\n\nexport default PDFRenderer;\n","import BlobStream from 'blob-stream';\nimport PDFRenderer from './renderer';\nimport StyleSheet from './stylesheet';\nimport { createInstance } from './elements';\nimport Font from './font';\nimport { version } from '../package.json';\n\nconst View = 'VIEW';\nconst Text = 'TEXT';\nconst Link = 'LINK';\nconst Page = 'PAGE';\nconst Note = 'NOTE';\nconst Image = 'IMAGE';\nconst Document = 'DOCUMENT';\n\nconst pdf = input => {\n  const container = createInstance({ type: 'ROOT' });\n  const mountNode = PDFRenderer.createContainer(container);\n\n  if (input) updateContainer(input);\n\n  function isDirty() {\n    return container.isDirty;\n  }\n\n  function updateContainer(doc) {\n    PDFRenderer.updateContainer(doc, mountNode, null);\n  }\n\n  async function toBlob() {\n    await container.render();\n\n    const stream = container.instance.pipe(BlobStream());\n\n    return new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        try {\n          const blob = stream.toBlob('application/pdf');\n\n          if (container.document.props.onRender) {\n            container.document.props.onRender({ blob });\n          }\n\n          resolve(blob);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      stream.on('error', reject);\n    });\n  }\n\n  function toBuffer() {\n    if (container.document.props.onRender) {\n      container.document.props.onRender();\n    }\n\n    container.render();\n\n    return container.instance;\n  }\n\n  function toString() {\n    let result = '';\n    container.render();\n\n    return new Promise((resolve, reject) => {\n      try {\n        container.instance.on('data', function(buffer) {\n          result += buffer;\n        });\n\n        container.instance.on('end', function() {\n          if (container.document.props.onRender) {\n            container.document.props.onRender({ string: result });\n          }\n\n          resolve(result);\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  return {\n    isDirty,\n    updateContainer,\n    toBuffer,\n    toBlob,\n    toString,\n  };\n};\n\nexport {\n  version,\n  PDFRenderer,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Document,\n  StyleSheet,\n  createInstance,\n  pdf,\n};\n","import fs from 'fs';\nimport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFRenderer,\n  createInstance,\n} from './index';\n\nexport const renderToStream = function(element) {\n  return pdf(element).toBuffer();\n};\n\nexport const renderToFile = function(element, filePath, callback) {\n  const output = renderToStream(element);\n  const stream = fs.createWriteStream(filePath);\n\n  output.pipe(stream);\n\n  return new Promise((resolve, reject) => {\n    stream.on('finish', () => {\n      if (callback) callback(output, filePath);\n      resolve(output);\n    });\n    stream.on('error', reject);\n  });\n};\n\nconst throwEnvironmentError = name => {\n  throw new Error(\n    `${name} is a web specific API. Or you're either using this component on Node, or your bundler is not loading react-pdf from the appropiate web build.`,\n  );\n};\n\nexport const PDFViewer = () => {\n  throwEnvironmentError('PDFViewer');\n};\n\nexport const PDFDownloadLink = () => {\n  throwEnvironmentError('PDFDownloadLink');\n};\n\nexport const BlobProvider = () => {\n  throwEnvironmentError('BlobProvider');\n};\n\nexport const render = renderToFile;\n\nexport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFRenderer,\n  createInstance,\n} from './index';\n\nexport default {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFRenderer,\n  createInstance,\n  renderToStream,\n  renderToFile,\n  render,\n};\n"],"names":["StandardFont","src","name","PDFFont","open","glyphs","str","encoded","positions","this","encode","map","_","i","g","glyph","getGlyph","parseInt","advanceWidth","codePoint","id","font","characterToGlyph","ascender","descender","lineGap","Run","fallbackFontInstance","string","runs","res","lastFont","lastIndex","index","run","defaultFont","attributes","length","push","char","slice","start","end","codePointAt","hasGlyphForCodePoint","fallbackFont","Node","data","prev","next","toString","LinkedList","head","tail","listSize","node","isEmpty","last","toArray","result","fun","n","isLinked","listLength","newNode","unshift","insertAfter","insertBefore","linebreak","nodes","lines","settings","options","demerits","line","flagged","fitness","tolerance","activeNodes","sum","lineLengths","breaks","tmp","Infinity","breakpoint","position","ratio","fitnessClass","totals","previous","computeCost","active","currentLine","width","stretch","shrink","lineLength","type","infinity","computeSum","breakPointIndex","penalty","mainLoop","badness","tmpSum","candidate","first","candidates","currentClass","remove","Math","pow","abs","undefined","forEach","size","reverse","glue","box","value","hyphenated","SOFT_HYPHEN_HEX","NO_BREAK_SPACE_DECIMAL","getWords","glyphString","words","codePointAtGlyphIndex","isWhiteSpace","word","h","Hypher","english","hyphenateString","includes","split","hyphenate","hyphenateWord","part","formatter","measureText","textAlign","callback","spaceWidth","hyphenWidth","hyphenPenalty","opts","spaceStretch","spaceShrink","array","partIndex","partArray","isLastPart","HYPHEN","TOLERANCE_LIMIT","hyphenationCallback","Textkit","fallbackLinebreaker","createLinebreaker","paragraphStyle","measuredWidth","measureWidth","align","fallback","suggestLineBreak","glyphIndexAtOffset","insertGlyph","breakNode","findBreakNode","breakIndex","fontSize","glyphRuns","scale","unitsPerEm","layout","xAdvance","shrinkWhitespaceFactor","before","after","LayoutEngine","BaseLayoutEngine","scriptItemizer","textDecorationEngine","lineFragmentGenerator","fontSubstitutionEngine","lineBreaker","justificationEngine","fetch","then","response","buffer","arrayBuffer","Buffer","from","emojiSource","fonts","register","family","otherOptions","registerHyphenationCallback","registerEmojiSource","url","format","getRegisteredFonts","_Object$keys","getFont","getEmojiSource","getHyphenationCallback","load","async","fontFamily","doc","loading","isUrl","fetchFont","fontkit","create","openSync","loaded","registerFont","standardFonts","Error","reset","hasOwnProperty","clear","Root","isDirty","document","instance","_layoutEngine","Font","child","PDFDocument","autoFirstPage","render","MARKERS","JPEG","height","readUInt16BE","marker","pos","createCache","limit","cache","keys","key","shift","imagesCache","isValidFormat","lower","toLowerCase","isCompatibleBase64","test","getImage","body","extension","PNG","resolveBase64Image","match","exec","resolve","resolveLocalImage","_JSON$stringify","resolveRemoteImage","constructor","isPng","isJpg","resolveImage","get","image","set","emojis","regex","emojiRegex","reflect","promise","args","v","e","fetchEmojiImage","getCodePoints","_Array$from","join","buildEmojiUrl","emoji","fetchEmojis","promises","emojiUrl","embedEmojis","fragments","fragment","emojiSize","chunk","replace","Attachment","CHARACTER","floor","String","fromCharCode","Document","root","props","children","parent","indexOf","title","author","subject","keywords","creator","producer","info","Title","Author","Subject","Keywords","Creator","Producer","listToExplore","style","childNode","_Promise","all","loadFonts","loadImages","applyProps","newProps","pageCount","reduce","acc","page","wrapArea","paddingBottom","wrap","subpages","wrapPages","j","renderDynamicNodes","addMetaData","loadEmojis","loadAssets","renderPages","defaultProps","PERCENT","computed","Yoga","createDefault","insertChild","getChildCount","splice","removeChild","attr","fixedMethod","upperFirst","percentMethod","isPercent","edge","setPositionPercent","setPosition","setPaddingPercent","setPadding","setMarginPercent","setMargin","setBorder","parentLayout","getAbsoluteLayout","left","top","copyStyle","calculateLayout","markDirty","getPositionType","POSITION_TYPE_ABSOLUTE","getComputedTop","getComputedLeft","getComputedRight","getComputedBottom","getComputedWidth","getMinWidth","getMaxWidth","getComputedHeight","getMinHeight","getMaxHeight","getComputedPadding","EDGE_TOP","EDGE_RIGHT","EDGE_BOTTOM","EDGE_LEFT","getComputedMargin","getComputedBorder","paddingTop","paddingRight","paddingLeft","marginTop","marginRight","marginBottom","marginLeft","setPositionType","POSITION_TYPE_RELATIVE","setDimension","yogaValue","prop","isAlignType","ALIGN_AUTO","DISPLAY_FLEX","DISPLAY_NONE","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","FLEX_DIRECTION_COLUMN","FLEX_DIRECTION_COLUMN_REVERSE","ALIGN_STRETCH","ALIGN_BASELINE","JUSTIFY_SPACE_AROUND","ALIGN_SPACE_AROUND","JUSTIFY_SPACE_BETWEEN","ALIGN_SPACE_BETWEEN","WRAP_WRAP","WRAP_WRAP_REVERSE","WRAP_NO_WRAP","JUSTIFY_FLEX_START","ALIGN_FLEX_START","JUSTIFY_FLEX_END","ALIGN_FLEX_END","JUSTIFY_CENTER","ALIGN_CENTER","parseValue","parseFloat","unit","parseScalar","scalar","Object","prototype","styleShortHands","expandStyles","propsArray","resolvedStyle","verticalAlign","expandedProps","propName","call","matchBorderShorthand","processBorders","transformStyles","expandedStyles","resolved","styles","flatten","input","Array","isArray","resolveMediaQueries","container","matchMedia","[object Object]","absoluteFillObject","Debug","padding","margin","save","debugContent","debugPadding","debugMargin","debugText","restore","roundedWidth","round","right","roundedHeight","bottom","opacity","fillColor","text","max","rect","fill","Borders","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle","getComputedStyles","drawHorizontalBorder","drawVerticalBorder","dash","space","stroke","p1","p2","r1","r2","color","lineWidth","moveTo","quadraticCurveTo","lineTo","strokeColor","traceBorder","getRotation","transform","PI","getTranslateX","matchX","matchGeneric","getTranslateY","matchY","getScaleX","getScaleY","getMatrix","applySingleTransformation","element","origin","rotate","translate","Transformations","re","inheritedProperties","Base","merge","break","fixed","minPresenceAhead","orientation","StyleSheet","attribute","applyStyle","setter","isFunction","inheritedStyles","pick","borderRadius","backgroundColor","roundedRect","clone","absoluteChilds","filter","absolute","nonAbsoluteChilds","_Object$assign","Transform","TextInstance","_container","PAGE_SIZES","getPageSize","toUpperCase","RULER_WIDTH","RULER_COLOR","RULER_FONT_SIZE","DEFAULT_RULER_STEPS","LINE_WIDTH","LINE_COLOR","GRID_COLOR","range","steps","ceil","matchPercentage","Ruler","ruler","horizontalRuler","verticalRuler","horizontalRulerSteps","rulerSteps","percentage","hasVerticalRuler","verticalRulerSteps","hasHorizontalRuler","drawHorizontalRuler","drawVerticalRuler","offset","hRange","getHorizontalSteps","step","vRange","getVerticalSteps","Page","_size","getRulerWidth","resetMargins","setWidth","rulerWidth","elements","appendChild","Fragment","createInstance","addDynamicChild","cb","removeAllChilds","super","addPage","renderChildren","debug","renderRuler","View","applyTransformations","drawBackgroundColor","drawBorders","PROTOCOL_REGEXP","getURL","IGNORABLE_CODEPOINTS","buildSubsetForFont","ignoreChars","charSubset","subsetRegex","RegExp","PREPROCESSORS","transformText","transformation","getFragments","lineHeight","textDecoration","textDecorationColor","textDecorationStyle","textTransform","letterSpacing","obj","preprocessor","getAttributedString","AttributedString","fromFragments","trim","INFINITY","PDFRenderer","createPDFRenderer","Rect","Text","_attributedString","renderCallback","setMeasureFunc","bind","href","blocks","block","counter","path","Path","Container","attributedString","layoutEngine","linesCount","widthMode","heightMode","MEASURE_MODE_EXACTLY","layoutText","flexGrow","NaN","linesHeight","MEASURE_MODE_AT_MOST","min","linesWidth","orphans","widows","linesQuantity","sliceHeight","slicedLine","lineIndexAtHeight","heightAtLineIndex","wrapHeight","slicedLineIndex","stringEnd","initialX","y","x","Link","link","Note","note","SAFETY_HEIGHT","Image","measureImage","imageMargin","pagePadding","pageArea","MEASURE_MODE_UNDEFINED","scaledHeight","imageWidth","warn","message","xOffset","constructors","objectsEqual","a","b","oldPropsKeys","newPropsKeys","shouldReplaceLink","ReactFiberReconciler","parentInstance","internalInstanceHandle","rootContainerInstance","oldProps","emptyObject","Date","now","textInstance","oldText","newText","update","updatePayload","pdf","mountNode","createContainer","updateContainer","onRender","stream","pipe","BlobStream","reject","on","blob","toBlob","error","renderToStream","toBuffer","renderToFile","filePath","output","fs","createWriteStream","throwEnvironmentError","PDFViewer","PDFDownloadLink","BlobProvider"],"mappings":"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"}